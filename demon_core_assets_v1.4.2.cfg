
###################################################
#######>>>>>>>>>>  3DPrintDemon  <<<<<<<<<<<#######
#######   https://github.com/3DPrintDemon   #######


[gcode_macro _CORE_VARS]

variable_orca_bed_offset: 0.00
variable_offset_reset: False
variable_orca_surface: "High Temp Plate"
variable_filament: "PLA"
variable_layer: 0.2
variable_bed: 0
variable_chamber_thermal_sensor: 0
variable_heat_wait_temp: 10
variable_fan_speed: 0
variable_nm_fan_speed: 0
variable_last_known_z: 0
variable_no_home_z_move: False

gcode:

#######################################################
# DEMON PRINT START ASSETS
#######################################################

[gcode_macro PRINT_START_HEATSOAK_TIMERS]
description: Choose the temps for your PRINT START heatsoak. Any changes not visable in saved file, only in active RAM. Use the readback macro to see current settings!
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set lotimer = params.LOW_TEMP_TIMER|default(0)|int %}
  {% set hitimer = params.HI_TEMP_TIMER|default(0)|int %}
  {% set detimer = params.DEFAULT_TEMP_TIMER|default(0)|int %}

  {% if 'LOW_TEMP_TIMER' not in params and 'HI_TEMP_TIMER' not in params and 'DEFAULT_TEMP_TIMER' not in params %}
    RESPOND TYPE=error MSG="Please enter a value to change the setting!"
    
  {% else %}
    {% if 'LOW_TEMP_TIMER' in params %}
      {% if lotimer <= 0 %}
        RESPOND TYPE=COMMAND MSG="Print start heatsoak timer cannot be 0, value of 1 or higher can be accepted. Timer set for 1 minute."
        SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=lo_temp_timer VALUE=1
    
      {% elif lotimer >= 1 %}
        RESPOND TYPE=COMMAND MSG="Print start heatsoak. Low temp timer set to {lotimer|int} minutes"
        SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=lo_temp_timer VALUE={lotimer|int}
      {% endif %}

    {% else %}  
    {% endif %}

    {% if 'HI_TEMP_TIMER' in params %}
      {% if hitimer <= 0 %}
        RESPOND TYPE=COMMAND MSG="Print start heatsoak timer cannot be 0, value of 1 or higher can be accepted. Timer set for 1 minute."
        SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=hi_temp_timer VALUE=1
    
      {% elif hitimer >= 1 %}
        RESPOND TYPE=COMMAND MSG="Print start heatsoak. High temp timer set to {hitimer|int} minutes"
        SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=hi_temp_timer VALUE={hitimer|int}
      {% endif %}

    {% else %}  
    {% endif %}

  {% if 'DEFAULT_TEMP_TIMER' in params %}
      {% if detimer <= 0 %}
        RESPOND TYPE=COMMAND MSG="Print start heatsoak timer cannot be 0, value of 1 or higher can be accepted. Timer set for 1 minute."
        SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=default_temp_timer VALUE=1
    
      {% elif hitimer >= 1 %}
        RESPOND TYPE=COMMAND MSG="Print start heatsoak. Default temp timer for unassigned profiles set to {detimer|int} minutes"
        SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=default_temp_timer VALUE={detimer|int}
      {% endif %}

    {% else %}  
    {% endif %}
    
  {% endif %}



[gcode_macro NEVERMORE_TOGGLE]
description: Toggle the use of your NEVERMORE fan on & off with each click of this button! State must be set BEFORE you start a print! If you dont have a fan you will get errors on use!
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
  {% if start_vars.nevermore == False %}
    RESPOND TYPE=error MSG="NEVERMORE FAN ENABLED!"
    SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=nevermore VALUE=True

  {% elif start_vars.nevermore == True %}
    RESPOND TYPE=error MSG="NEVERMORE FAN DISABLED!"
    SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=nevermore VALUE=False
  {% endif %}
  


[gcode_macro ADAPTIVE_MESHING_TOGGLE]
description: Toggle the use of adaptive besh meshing on & off with each click of this button! State must be set BEFORE you start a print! Must have bed meshes built & stored!
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
  {% if start_vars.adaptive_meshing == False %}
    RESPOND TYPE=error MSG="ADAPTIVE MESHING IS ON!"
    SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=adaptive_meshing VALUE=True

  {% elif start_vars.adaptive_meshing == True %}
    RESPOND TYPE=error MSG="ADAPTIVE MESHING IS OFF!"
    SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=adaptive_meshing VALUE=False
  {% endif %}


[gcode_macro PURGE_LINE_TOGGLE]
description: Toggle the printing of all PRINT_START purge lines on & off with each click of this button! State must be set BEFORE you start a print!
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
  {% if start_vars.purge_lines == False %}
    RESPOND TYPE=error MSG="PURGE LINE PRINTING IS ON!"
    SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=purge_lines VALUE=True

  {% elif start_vars.purge_lines == True %}
    RESPOND TYPE=error MSG="PURGE LINE PRINTING IS OFF!"
    SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=purge_lines VALUE=False
  {% endif %}

  
  
[gcode_macro PRINT_START_QUICK_SETTINGS_READBACK]
description: Use this macro to see your live Quick Settings! Any changes to these Quick Settings are not visible in the saved macro files. Only in active RAM.
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

    RESPOND TYPE=COMMAND MSG="Nevermore Enabled: {start_vars.nevermore}"
    RESPOND TYPE=COMMAND MSG="Default temperature heatsoak timer for unassigned profiles is set to {start_vars.default_temp_timer} minutes"
    RESPOND TYPE=COMMAND MSG="Low temperature heatsoak timer is set to {start_vars.lo_temp_timer} minutes"
    RESPOND TYPE=COMMAND MSG="High temperature heatsoak timer is set to {start_vars.hi_temp_timer} minutes"
    RESPOND TYPE=COMMAND MSG="Adaptive meshing is active: {start_vars.adaptive_meshing}" 
    RESPOND TYPE=COMMAND MSG="Draw PRINT_START purge line is active: {start_vars.purge_lines}" 
    RESPOND TYPE=COMMAND MSG="Heatsoak timer is to be skipped: {start_vars.start_my_print_already}"
   
    

[gcode_macro _INITIAL_SETUP]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
   
    M220 S{start_vars.feed_rate}
 
  {% if core_vars.filament in ['PLA', 'PLA+'] and core_vars.layer|float <0.25%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.pla_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.pla_pa} SMOOTH_TIME={start_vars.pla_st}

  {% elif core_vars.filament == 'ASA' and core_vars.layer|float <0.25%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.asa_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.asa_pa} SMOOTH_TIME={start_vars.asa_st}

  {% elif core_vars.filament == 'ABS' and core_vars.layer|float <0.25%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.abs_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.abs_pa} SMOOTH_TIME={start_vars.abs_st}

  {% elif core_vars.filament in ['PET', 'PETG'] and core_vars.layer|float <0.25%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.petg_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.petg_pa} SMOOTH_TIME={start_vars.petg_st}   

  {% elif core_vars.filament in ['FLEX', 'TPU'] and core_vars.layer|float <0.25%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.tpu_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.tpu_pa} SMOOTH_TIME={start_vars.tpu_st}  

  {% elif core_vars.filament in ['PLA', 'PLA+'] and core_vars.layer|float >0.26%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.pla_hi_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.pla_pa} SMOOTH_TIME={start_vars.pla_st}

  {% elif core_vars.filament == 'ASA' and core_vars.layer|float >0.26%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.asa_hi_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.asa_pa} SMOOTH_TIME={start_vars.asa_st}

  {% elif core_vars.filament == 'ABS' and core_vars.layer|float >0.26%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.abs_hi_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.abs_pa} SMOOTH_TIME={start_vars.abs_st}

  {% elif core_vars.filament in ['PET', 'PETG'] and core_vars.layer|float >0.26%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.petg_hi_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.petg_pa} SMOOTH_TIME={start_vars.petg_st}
   
  {% elif core_vars.filament in ['FLEX', 'TPU'] and core_vars.layer|float >0.26%}
    {% if start_vars.disable_set_flow != True %}
      M221 S{start_vars.tpu_hi_flow_rate}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.tpu_pa} SMOOTH_TIME={start_vars.tpu_st}  

  {% endif %}



[gcode_macro _CHAMBER_SENSOR_DEFINE]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
 
  {% if start_vars.chamber_fan and start_vars.chamber_sensor == True %}
    {action_raise_error("This error is caused by multiple chamber thermal sensors being set for use in the demon_user_settings file, please disable one sensor & restart the print!")} 

  {% elif ('temperature_sensor Chamber_Temp' not in printer.configfile.config) and ('temperature_fan chamber' not in printer.configfile.config) %}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=chamber_thermal_sensor VALUE=3 
    
  {% elif ('temperature_fan chamber' in printer.configfile.config) %}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=chamber_thermal_sensor VALUE=1

  {% elif ('temperature_sensor Chamber_Temp' in printer.configfile.config) %}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=chamber_thermal_sensor VALUE=2
  
  {% endif %}


[gcode_macro _BED_FANS_SETUP]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if core_vars.filament in ['PLA', 'PLA+'] %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.pla_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.pla_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.pla_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.pla_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.pla_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.pla_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_max_speed VALUE={start_vars.floating_bed_fans_max}
      M400

    {% elif core_vars.filament == 'ASA' %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.asa_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.asa_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.asa_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.asa_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.asa_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.asa_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_max_speed VALUE={start_vars.floating_bed_fans_max}
      M400

    {% elif core_vars.filament == 'ABS' %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.abs_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.abs_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.abs_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.abs_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.abs_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.abs_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_max_speed VALUE={start_vars.floating_bed_fans_max}
      M400

    {% elif core_vars.filament in ['PET', 'PETG'] %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.petg_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.petg_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.petg_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.petg_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.petg_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.petg_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_max_speed VALUE={start_vars.floating_bed_fans_max}
      M400

    {% elif core_vars.filament in ['FLEX', 'TPU'] %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.tpu_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.tpu_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.tpu_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.tpu_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.tpu_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.tpu_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_max_speed VALUE={start_vars.floating_bed_fans_max}
      M400

    {% else %}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.default_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.default_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.default_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.default_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.default_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.default_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_monitor VALUE={start_vars.floating_bed_fans}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=floating_max_speed VALUE={start_vars.floating_bed_fans_max}
      M400

    {% endif %}



[gcode_macro _CHAMBER_HEATER_SETUP]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if core_vars.filament in ['PLA', 'PLA+'] %} 
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=min_thresold VALUE={start_vars.pla_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=max_thresold VALUE={start_vars.pla_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=mid_point VALUE={(start_vars.pla_min_chamber_temp + start_vars.pla_max_chamber_temp) / 2|float}
      M400

    {% elif core_vars.filament == 'ASA' %} 
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=min_thresold VALUE={start_vars.asa_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=max_thresold VALUE={start_vars.asa_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=mid_point VALUE={(start_vars.asa_min_chamber_temp + start_vars.asa_max_chamber_temp) / 2|float}
      M400

    {% elif core_vars.filament == 'ABS' %} 
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=min_thresold VALUE={start_vars.abs_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=max_thresold VALUE={start_vars.abs_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=mid_point VALUE={(start_vars.abs_min_chamber_temp + start_vars.abs_max_chamber_temp) / 2|float}
      M400

    {% elif core_vars.filament in ['PET', 'PETG'] %} 
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=min_thresold VALUE={start_vars.petg_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=max_thresold VALUE={start_vars.petg_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=mid_point VALUE={(start_vars.petg_min_chamber_temp + start_vars.petg_max_chamber_temp) / 2|float}
      M400

    {% elif core_vars.filament in ['FLEX', 'TPU'] %} 
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=min_thresold VALUE={start_vars.tpu_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=max_thresold VALUE={start_vars.tpu_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=mid_point VALUE={(start_vars.tpu_min_chamber_temp + start_vars.tpu_max_chamber_temp) / 2|float}
      M400

    {% else %}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=min_thresold VALUE={start_vars.default_min_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=max_thresold VALUE={start_vars.default_max_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_C_HEATER_VARS VARIABLE=mid_point VALUE={(start_vars.default_min_chamber_temp + start_vars.default_max_chamber_temp) / 2|float}
      M400

    {% endif %}

[gcode_macro _CHAMBER_TEMPS_HELPER]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if core_vars.filament in ['PLA', 'PLA+'] %} 
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_wait_temp VALUE={start_vars.pla_min_chamber_temp}
    {% if start_vars.chamber_fan == True %}
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.pla_max_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: PLA {start_vars.pla_max_chamber_temp}c"
    {% endif %}

  {% elif core_vars.filament == 'ASA' %}   
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_wait_temp VALUE={start_vars.asa_min_chamber_temp}
    {% if start_vars.chamber_fan == True %}
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.asa_max_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: ASA {start_vars.asa_max_chamber_temp}c"   
    {% endif %}
    
  {% elif core_vars.filament == 'ABS' %} 
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_wait_temp VALUE={start_vars.abs_min_chamber_temp}
    {% if start_vars.chamber_fan == True %}
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.abs_max_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: ABS {start_vars.abs_max_chamber_temp}c"   
    {% endif %}

  {% elif core_vars.filament in ['PET', 'PETG'] %}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_wait_temp VALUE={start_vars.petg_min_chamber_temp}
    {% if start_vars.chamber_fan == True %}
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.petg_max_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: PETG {start_vars.petg_max_chamber_temp}c"   
    {% endif %}
    
  {% elif core_vars.filament in ['FLEX', 'TPU'] %} 
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_wait_temp VALUE={start_vars.tpu_min_chamber_temp}
    {% if start_vars.chamber_fan == True %}
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.tpu_max_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: TPU {start_vars.tpu_max_chamber_temp}c"   
    {% endif %}
    
  {% else %}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_wait_temp VALUE={start_vars.default_min_chamber_temp}
    {% if start_vars.chamber_fan == True %}
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.default_max_chamber_temp}  
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: Default {start_vars.default_max_chamber_temp}c"  
    {% endif %}
    
 {% endif %}

 

[gcode_macro _START_WAIT_AND_TIMER_HANDLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if core_vars.chamber_thermal_sensor == 0 %}
    {action_raise_error("This error is caused by no correctly named chamber_sensor or temperature controlled chamber_fan being available to the system! Check the system is setup correctly!")}  

  {% elif core_vars.chamber_thermal_sensor == 1 %}
    {% set thermal_sensor = printer["temperature_fan chamber"].temperature %}
    {% set wait_thermal_sensor = "temperature_fan chamber" %}

  {% elif core_vars.chamber_thermal_sensor == 2 %}
    {% set thermal_sensor = printer["temperature_sensor Chamber_Temp"].temperature %}
    {% set wait_thermal_sensor = "temperature_sensor Chamber_Temp" %}

  {% endif %}

  {% if start_vars.chamber_fan and start_vars.chamber_sensor == True %} 
    {action_raise_error("This error is caused by you setting both the chamber_fan & chamber_sensor to true. Check demon_user_settings file & set these correctly for your printer!")}
  {% endif %}

  {% if start_vars.chamber_fan or start_vars.chamber_sensor == True %} 
    {% if thermal_sensor < core_vars.heat_wait_temp %}
        
      {% if start_vars.chamber_temp_wait == True %}
        _Z_PARK                         # Goes to center of the bed
        SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {core_vars.heat_wait_temp}c"
        RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {core_vars.heat_wait_temp}c"
        TEMPERATURE_WAIT SENSOR="{wait_thermal_sensor}" MINIMUM={core_vars.heat_wait_temp|float -1}
        RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"

        _CONDITIONAL_CLEAN
        G28 Z
      
      {% else %}
        _Z_PARK                        # Goes to center of the bed
        {% if core_vars.filament in ['PLA', 'PLA+', 'PET', 'PETG', 'FLEX', 'TPU'] %}
          _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}
          RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via sensor"
        {% elif core_vars.filament in ['ASA', 'ABS'] %}
          _HEAT_WAIT MINUTES={start_vars.hi_temp_timer} 
          RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via sensor"
        {% else %}
          _HEAT_WAIT MINUTES={start_vars.default_temp_timer}
          RESPOND TYPE=COMMAND MSG="Running Default Temp Chamber Timer via sensor"

          _CONDITIONAL_CLEAN
          G28 Z
             
        {% endif %} 
      {% endif %}
      
    {% else %}
      SET_DISPLAY_TEXT MSG="Already up to {core_vars.filament} temp, heat soak skipped"
      RESPOND TYPE=COMMAND MSG="Already up to {core_vars.filament} temp, heat soak skipped"
      G4 P5000
     
    {% endif %} 


  {% else %}

    {% if core_vars.filament in ['PLA', 'PLA+', 'PET', 'PETG', 'FLEX', 'TPU'] %} 
      RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via Filament Type"
      _Z_PARK                        # Goes to center of the bed
      _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}     
    
    {% elif core_vars.filament in ['ASA', 'ABS'] %}  
      RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via Filament Type"
      _Z_PARK                        # Goes to center of the bed
      # M106 S255
      _HEAT_WAIT MINUTES={start_vars.hi_temp_timer}  
       
    {% else %}
      {% if core_vars.bed|int < 90|int %}
        RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via File Temps"
        _Z_PARK                        # Goes to center of the bed 
        _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}

      {% else %}
        RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via File Temps"
        _Z_PARK                        # Goes to center of the bed
        # M106 S255
        _HEAT_WAIT MINUTES={start_vars.hi_temp_timer}
      {% endif %}
    
    {% endif %}
    
  {% endif %}

    M107                                                    # Turns off parts cooling fan
   

 
[gcode_macro _MESH_HANDLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if start_vars.adaptive_meshing == True %}

    {% if ('mcu eddy' in printer.configfile.config) or ('probe_eddy_current btt_eddy' in printer) or ('probe_eddy_current eddy' in printer) %}
      BED_MESH_CALIBRATE METHOD=rapid_scan ADAPTIVE=1 ADAPTIVE_MARGIN=10
      M400
      G0 Z{printer["gcode_macro _Z_PARK"].z_park} F3600

    {% else %}
      BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=10
      M400
      {% if 'scanner' in printer.configfile.config %}
        CARTOGRAPHER_TOUCH
      {% endif %}  
    {% endif %}

    {% if start_vars.klicky_probe == True and printer.configfile.settings.stepper_z.endstop_pin == 'probe:z_virtual_endstop' %}
      Dock_Probe_Unlock
      {% if start_vars.nozzle_cleaner == True %}
        CLEAN_NOZZLE
      {% endif %}
    {% elif start_vars.klicky_probe != True and printer.configfile.settings.stepper_z.endstop_pin == 'probe:z_virtual_endstop' %}
      {% if start_vars.nozzle_cleaner == True %}
        CLEAN_NOZZLE
      {% endif %}
    {% endif %}
   
  {% else %}  
    {% if core_vars.filament in ['PLA', 'PLA+'] %}
      {% if 'bed_mesh default' in printer.configfile.config %}
        BED_MESH_PROFILE LOAD="default"
        RESPOND TYPE=COMMAND MSG="Default mesh loaded"
      {% else %}
        {action_raise_error("ERROR: There is no recognised default mesh available, please build & save one to continue!")}
      {% endif %}

    {% elif core_vars.filament == 'ASA' %} 
      {% if 'bed_mesh ASA' in printer.configfile.config %}
        BED_MESH_PROFILE LOAD="ASA"
        RESPOND TYPE=COMMAND MSG="ASA mesh loaded"
      {% else %}
        {action_raise_error("ERROR: There is no recognised ASA mesh available, please build & save one to continue!")}
      {% endif %}
    
    {% elif core_vars.filament == 'ABS' %}
      {% if 'bed_mesh ABS' in printer.configfile.config %}
        BED_MESH_PROFILE LOAD="ABS"
        RESPOND TYPE=COMMAND MSG="ABS mesh loaded"
      {% else %}
        {action_raise_error("ERROR: There is no recognised ABS mesh available, please build & save one to continue!")}
      {% endif %}
    
    {% elif core_vars.filament in ['PET', 'PETG'] %}
      {% if 'bed_mesh PETG' in printer.configfile.config %}
        BED_MESH_PROFILE LOAD="PETG"  
        RESPOND TYPE=COMMAND MSG="PETG mesh loaded"
      {% else %}
        {action_raise_error("ERROR: There is no recognised PETG mesh available, please build & save one to continue!")}
      {% endif %}
    
    {% elif core_vars.filament in ['FLEX', 'TPU'] %}
      {% if 'bed_mesh TPU' in printer.configfile.config %}
        BED_MESH_PROFILE LOAD="TPU"  
        RESPOND TYPE=COMMAND MSG="TPU mesh loaded"
      {% else %}
        {action_raise_error("ERROR: There is no recognised TPU mesh available, please build & save one to continue!")}
      {% endif %}

    {% else %}    
      {% if params.BED|float < 90 %}
        {% if 'bed_mesh default' in printer.configfile.config %}
          BED_MESH_PROFILE LOAD="default"
          RESPOND TYPE=COMMAND MSG="Default mesh by temp loaded"
        {% else %}
          {action_raise_error("ERROR: There is no recognised default mesh available, please build & save one to continue!")}
        {% endif %}

      {% else %}
        {% if 'bed_mesh ASA' in printer.configfile.config %}
          BED_MESH_PROFILE LOAD="ASA" 
          RESPOND TYPE=COMMAND MSG="ASA mesh by temp loaded"
          
        {% elif 'bed_mesh ABS' in printer.configfile.config %}
          BED_MESH_PROFILE LOAD="ABS" 
          RESPOND TYPE=COMMAND MSG="ABS mesh by temp loaded"

        {% elif 'bed_mesh ASA' not in printer.configfile.config and 'bed_mesh ABS' not in printer.configfile.config %}
          {action_raise_error("ERROR: There are no recognised high temperature meshes available, please build an ASA or ABS mesh & save it to continue!")}
        {% endif %} 
      {% endif %}    
    {% endif %}

    M400
    {% if 'scanner' in printer.configfile.config %}
      CARTOGRAPHER_TOUCH
    {% endif %}  
  {% endif %}


  
[gcode_macro _ORCA_MULTI_SURFACE_HANDLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set surface = printer["gcode_macro _CORE_VARS"].orca_surface %}
  # {% set surface = params.SURFACE|default('High Temp Plate')|string %}
  
 
  {% if start_vars.orca_multi_surface == True %}
    {% if surface == 'Cool Plate' %}
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=orca_bed_offset VALUE={start_vars.orca_cool_plate}

    {% elif surface == 'High Temp Plate' %}
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=orca_bed_offset VALUE={start_vars.orca_smooth_hi_temp_plate}
      
    {% elif surface == 'Textured PEI Plate' %}
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=orca_bed_offset VALUE={start_vars.orca_textured_pei_plate}

    {% elif surface == 'Engineering Plate' %}
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=orca_bed_offset VALUE={start_vars.orca_engineering_plate}

    {% elif surface == 'Textured Cool Plate' %}
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=orca_bed_offset VALUE={start_vars.orca_textured_cool_plate}
        
    {% endif %}
      
  {% endif %}



[gcode_macro _Z_OFFSET_HANDLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  # {% set filament_type = printer["gcode_macro _CORE_VARS"].filament %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  # {% set filament_type = params.FILAMENT|default('PLA')|string %} 

  {% if start_vars.orca_multi_surface == True and start_vars.combine_offset == True %}
    {% if core_vars.orca_bed_offset >= -0.165 and core_vars.orca_bed_offset <= 0.165 %}
      {% if core_vars.filament in ['PLA', 'PLA+'] %}
        {% if core_vars.orca_bed_offset == 0.00 %}
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
          RESPOND TYPE=COMMAND MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
        {% elif core_vars.orca_bed_offset != 0.00 %}
          SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1
          SET_DISPLAY_TEXT MSG="BED TYPE: Applying {core_vars.orca_surface} offset adjustment"
          RESPOND TYPE=echo MSG="BED TYPE: Applying {core_vars.orca_surface} offset adjustment"
          # SET_DISPLAY_TEXT MSG="REQUESTED BED TYPE & HIGH TEMP COMBINED OFFSET ADJUSTMENT APPLIED"
          # RESPOND TYPE=echo MSG="REQUESTED BED TYPE & HIGH TEMP COMBINED OFFSET ADJUSTMENT APPLIED"
        {% endif %}

      {% elif start_vars.high_temp_expansion_offset == True and core_vars.filament in ['ASA', 'ABS'] %}
        {% if start_vars.high_temp_offset >= -0.165 and start_vars.high_temp_offset <= 0.165 %}
          {% if core_vars.orca_bed_offset == 0.00 %}
            SET_GCODE_OFFSET Z_ADJUST={start_vars.high_temp_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
            SET_DISPLAY_TEXT MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
            RESPOND TYPE=echo MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
          {% elif core_vars.orca_bed_offset != 0.00 %}
            {% if (start_vars.high_temp_offset + core_vars.orca_bed_offset) >= -0.165 and (start_vars.high_temp_offset + core_vars.orca_bed_offset) <= 0.165 %}
              SET_GCODE_OFFSET Z_ADJUST={start_vars.high_temp_offset + core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
              SET_DISPLAY_TEXT MSG="BED TYPE: Applying {core_vars.orca_surface} & High Temp combined offset adjustment"
              RESPOND TYPE=echo MSG="BED TYPE: Applying {core_vars.orca_surface} & High Temp combined offset adjustment"
            {% else %}
              {action_emergency_stop("EMERGENCY STOP! EXCESSIVE HIGH TEMP OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
            {% endif %}    
          {% endif %} 
        {% else %}
          {action_emergency_stop("EMERGENCY STOP! EXCESSIVE HIGH TEMP OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
        {% endif %}
          G4 P10000

      {% elif start_vars.petg_anti_squish == True and core_vars.filament in ['PET', 'PETG'] %}
        {% if start_vars.petg_offset >= 0.0 and start_vars.petg_offset <= 0.165 %}
          {% if core_vars.orca_bed_offset == 0.00 %}
            SET_GCODE_OFFSET Z_ADJUST={start_vars.petg_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
            SET_DISPLAY_TEXT MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
            RESPOND TYPE=echo MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
          {% elif core_vars.orca_bed_offset != 0.00 %}
            {% if (start_vars.petg_offset + core_vars.orca_bed_offset) >= -0.165 and (start_vars.petg_offset + core_vars.orca_bed_offset) <= 0.165 %}
              SET_GCODE_OFFSET Z_ADJUST={start_vars.petg_offset + core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
              SET_DISPLAY_TEXT MSG="BED TYPE: Applying {core_vars.orca_surface} & PETG Anti Squish combined offset adjustment"
              RESPOND TYPE=echo MSG="BED TYPE: Applying {core_vars.orca_surface} & PETG Anti Squish combined offset adjustment"
            {% else %}
             {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
            {% endif %}  
          {% endif %}
        {% else %}
          {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
        {% endif %}
          G4 P10000

      {% elif start_vars.tpu_anti_squish == True and core_vars.filament in ['FLEX','TPU'] %}
        {% if start_vars.tpu_offset >= 0.0 and start_vars.tpu_offset <= 0.165 %}
          {% if core_vars.orca_bed_offset == 0.00 %}
            SET_GCODE_OFFSET Z_ADJUST={start_vars.tpu_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
            SET_DISPLAY_TEXT MSG="REQUESTED TPU OFFSET ADJUSTMENT APPLIED"
            RESPOND TYPE=echo MSG="REQUESTED TPU OFFSET ADJUSTMENT APPLIED"
          {% elif core_vars.orca_bed_offset != 0.00 %}
           {% if (start_vars.tpu_offset + core_vars.orca_bed_offset) >= -0.165 and (start_vars.tpu_offset + core_vars.orca_bed_offset) <= 0.165 %}
              SET_GCODE_OFFSET Z_ADJUST={start_vars.tpu_offset + core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
              SET_DISPLAY_TEXT MSG="BED TYPE: Applying {core_vars.orca_surface} & TPU Anti Squish combined offset adjustment"
              RESPOND TYPE=echo MSG="BED TYPE: Applying {core_vars.orca_surface} & TPU Anti Squish combined offset adjustment"
            {% else %}
              {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
            {% endif %}
            
          {% endif %}
        {% else %}
          {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
        {% endif %}
          G4 P10000  

      {% elif start_vars.high_temp_expansion_offset == False and core_vars.filament in ['ASA', 'ABS'] %}
        {% if core_vars.orca_bed_offset == 0.00 %}
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
        {% elif core_vars.orca_bed_offset != 0.00 %}
          SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
        {% endif %}

      {% elif start_vars.petg_anti_squish == False and core_vars.filament in ['PET', 'PETG'] %}
        {% if core_vars.orca_bed_offset == 0.00 %}
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
        {% elif core_vars.orca_bed_offset != 0.00 %}
          SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
        {% endif %}

      {% elif start_vars.tpu_anti_squish == False and core_vars.filament in ['FLEX','TPU'] %}
        {% if core_vars.orca_bed_offset == 0.00 %}
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. NO OFFSET APPLIED"
        {% elif core_vars.orca_bed_offset != 0.00 %}
          SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
          SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
          RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
        {% endif %}
      {% endif %}

        
    {% else %}
      {action_emergency_stop("EMERGENCY STOP! EXCESSIVE PLATE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    {% endif %} 


  {% elif start_vars.orca_multi_surface == True and start_vars.combine_offset == False %}
    {% if core_vars.orca_bed_offset >= -0.165 and core_vars.orca_bed_offset <= 0.165 %} 
      {% if core_vars.orca_bed_offset == 0.00 %}
        SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} SELECTED. NO OFFSET APPLIED"
        RESPOND TYPE=COMMAND MSG="BED TYPE: {core_vars.orca_surface} SELECTED. NO OFFSET APPLIED"
        G4 P10000 
      {% elif core_vars.orca_bed_offset != 0.00 %}
        SET_GCODE_OFFSET Z_ADJUST={core_vars.orca_bed_offset} MOVE=1
        SET_DISPLAY_TEXT MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED"
        RESPOND TYPE=echo MSG="BED TYPE: {core_vars.orca_surface} selected. REQUESTED BED TYPE OFFSET ADJUSTMENT APPLIED" 
        G4 P10000 
      {% endif %} 
      
    {% else %}
      {action_emergency_stop("EMERGENCY STOP! EXCESSIVE PLATE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    {% endif %} 


  
  {% elif start_vars.orca_multi_surface == False and start_vars.combine_offset == True %}
    {action_raise_error("This error is caused by variable_orca_multi_surface being set to False when combine_offset is set to True! Check demon_user_settings file!")}
    
  {% elif start_vars.orca_multi_surface == False and start_vars.combine_offset == False %}
  
    {% if start_vars.high_temp_expansion_offset == True and core_vars.filament in ['ASA', 'ABS'] %}
      {% if start_vars.high_temp_offset >= -0.165 and start_vars.high_temp_offset <= 0.165 %}
        SET_GCODE_OFFSET Z_ADJUST={start_vars.high_temp_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
        SET_DISPLAY_TEXT MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
        RESPOND TYPE=echo MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
        G4 P10000

      {% else %}
        {action_emergency_stop("EMERGENCY STOP! EXCESSIVE HIGH TEMP OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    
      {% endif %}    

    {% elif start_vars.petg_anti_squish == True and core_vars.filament in ['PET', 'PETG'] %}
      {% if start_vars.petg_offset >= 0.0 and start_vars.petg_offset <= 0.165 %}
        SET_GCODE_OFFSET Z_ADJUST={start_vars.petg_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
        SET_DISPLAY_TEXT MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
        RESPOND TYPE=echo MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
        G4 P10000

      {% else %}
        {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    
      {% endif %}  

    {% elif start_vars.tpu_anti_squish == True and core_vars.filament in ['FLEX','TPU'] %}
      {% if start_vars.tpu_offset >= 0.0 and start_vars.tpu_offset <= 0.165 %}
        SET_GCODE_OFFSET Z_ADJUST={start_vars.tpu_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
        SET_DISPLAY_TEXT MSG="REQUESTED TPU OFFSET ADJUSTMENT APPLIED"
        RESPOND TYPE=echo MSG="REQUESTED TPU OFFSET ADJUSTMENT APPLIED"
        G4 P10000   

      {% else %}
        {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    
      {% endif %}  

    {% endif %}
  
  {% endif %}



[gcode_macro _ORCA_OFFSET_REMOVE]
variable_z: 0.00
gcode:
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

    {% if core_vars.orca_bed_offset != 0.00 %}
      SET_GCODE_OFFSET Z=0.00
      SET_DISPLAY_TEXT MSG="Resetting offset due to applied Orca offset modifer"
      RESPOND TYPE=COMMAND MSG="Resetting offset due to applied Orca offset modifer"
    {% endif %} 



[gcode_macro _EDDY_OFFSET_REMOVE]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

  {% if 'mcu eddy' in printer and 'probe_eddy_current btt_eddy' in printer %}
    {% if printer.gcode_move.homing_origin.z != 0.00 %}
      SET_GCODE_OFFSET Z=0
      RESPOND TYPE=COMMAND MSG="Removing Eddy auto offset"
    {% endif %}

  {% else %}
    RESPOND TYPE=COMMAND MSG="USB Eddy probe not present"
  {% endif %} 



[gcode_macro _OFFSET_RESET_CONTROL]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  
  {% if start_vars.orca_enable == True and core_vars.offset_reset == False %}
    _ORCA_OFFSET_REMOVE
  {% endif %}

  {% if core_vars.offset_reset == True %}
    SET_GCODE_OFFSET Z=0.0 MOVE=1 # Reset the adjusted G-Code Z offset
  {% endif %}

  {% if start_vars.auto_reset_eddy_offset == True %}
    _EDDY_OFFSET_REMOVE
  {% endif %}



[gcode_macro _START_POS]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
    {% if start_vars.start_x_position >= 50 or start_vars.start_y_position >= 50%}
    {action_emergency_stop("EMERGENCY STOP! EXCESSIVE START POSITION REQUESTED CORRECT IN USER SETTINGS FILE")}

  {% elif start_vars.purge_line_length|float > 150 %}
    {action_emergency_stop("EMERGENCY STOP! EXCESSIVE PURGE LENGTH REQUESTED CORRECT IN USER SETTINGS FILE")}
    
  {% endif %}

    SET_DISPLAY_TEXT MSG="Moving to Start Position"
    RESPOND TYPE=COMMAND MSG="Moving to Start Position"
    G0 Z25 F5000
    G0 X{start_vars.start_x_position} Y{start_vars.start_y_position} F5000 # Move to start position

    
    G0 Z5.0 F5000 # Lower speed
    G0 Z0.5 F150 # Lower slow for wait & to catch oozing nozzle during heating

    

[gcode_macro _PURGE_LINES]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set height = (printer.configfile.settings.extruder.nozzle_diameter * 0.75)|float %} #0.625
  {% set width = (printer.configfile.settings.extruder.nozzle_diameter * 1.25)|float %}
  {% set filament_area = 3.14159 * (printer.configfile.settings.extruder.filament_diameter ** 2) / 4 %}
  {% set rate = start_vars.purge_line_length * ((width * height) / filament_area) %}

  {% if start_vars.purge_lines == False %}
    G0 Z5.0
    SET_DISPLAY_TEXT MSG="Purge lines skipped, Print Start..."
    RESPOND TYPE=COMMAND MSG="Purge lines skipped, Print Start..."

  {% elif start_vars.adaptive_meshing == True and start_vars.purge_lines == True %}
    LINE_PURGE

  {% elif start_vars.use_kamp_adaptive_purge == True and start_vars.purge_lines == True %}
    LINE_PURGE
    
  {% else %}
    SET_DISPLAY_TEXT MSG="Printing Purge Lines"
    RESPOND TYPE=COMMAND MSG="Printing Purge Lines"
    G90  # Absolute mode
    G0 Z1.5 F9000 # Jump up to leave ooze blob

    G91 # Relative mode
  {% if start_vars.purge_along_y == True %}
    G0 Y7 F9000 # Move away from ooze blob
  {% else %}
    G0 X7 F9000
  {% endif %}

    G90 # Absolute mode
    G0 Z{height} F1500    
    G91 # Relative mode
    
  {% if start_vars.purge_along_y == True %} 
    G1 Y{start_vars.purge_line_length} E{rate} F1500 # Draw the first line
    G0 X{width} F5000 # Move to side a little
    G1 Y-{start_vars.purge_line_length -15} E{rate} F1500
    # G4 P2000 # wait 02 seconds    

  {% else %}
    G1 X{start_vars.purge_line_length} E{rate} F1500 # Draw the first line
    G0 Y{width +0.4} F5000 # Move to side a little
    G1 X-{start_vars.purge_line_length -15} E{rate} F1500
    # G4 P2000 # wait 02 seconds 
  {% endif %}

    G0 Z{height} F9000 # Lift a little
    G4 P2000 # wait 02 seconds 
    G0 X5 Y5 F9000 # Wipe Out
    G90 # Absolute mode
    G92 E0.0 # Reset Extruder
    M83 # Extruder relative mode
    G0 Z5.0 F9000 # Move Z Axis up little to prevent scratching of Heat Bed
    M400
    SET_DISPLAY_TEXT MSG="Print Start..."
    RESPOND TYPE=COMMAND MSG="Print Start..."

 {% endif %}
 

  
#######################################################
# Original gcode contribution by NoradZero
# [gcode_macro HANDLE_NEVERMORE_PRINT_END]
# gcode:
#   {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
#   {% set STAY_ON = start_vars.variable_default_nevermore_fan_stay_on | default(True) %}
#   {% set TARGET_SPEED = start_vars.variable_default_nevermore_after_print_speed | default(1) | float %}
#   {% set TARGET_TIME = start_vars.variable_default_nevermore_after_print_time | default(1) | int %}
#   RESPOND TYPE=COMMAND MSG="Handling Nevermore after print filtration"
#   SET_FAN_SPEED FAN=Nevermore SPEED={TARGET_SPEED}
#   {% if STAY_ON == False then }
#     _HEAT_WAIT MSG="After print filtration for..." MINUTES={TARGET_TIME}
#     M400   
#     SET_FAN_SPEED FAN=Nevermore SPEED=0
#     RESPOND TYPE=COMMAND MSG="Shutting down Nevermore filtration"
#   {% endif %}
#######################################################

[gcode_macro _NEVERMORE_POST_PRINT]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if start_vars.nevermore_post_timer == False %}
    {% if start_vars.nevermore_leave_running == False %}
      SET_FAN_SPEED FAN=Nevermore SPEED=0
      RESPOND TYPE=COMMAND MSG="Nevermore post print, fan off."
    {% else %}
      RESPOND TYPE=COMMAND MSG="Nevermore post print, leaving fan on."
    {% endif %}
       
  {% else %}
    {% if core_vars.filament in ['PLA', 'PLA+', 'PET', 'PETG', 'FLEX','TPU'] and start_vars.nevermore_asa_abs_only == True %}
      {% if start_vars.nevermore_leave_running == False %}
        SET_FAN_SPEED FAN=Nevermore SPEED=0
        RESPOND TYPE=COMMAND MSG="Nevermore post print timer bypass, fan off."
      {% else %}
        RESPOND TYPE=COMMAND MSG="Nevermore post print timer bypass, leaving fan on."
      {% endif %}
      
    {% else %}
      RESPOND TYPE=COMMAND MSG="Nevermore post print chamber filteration process started, fan set to {("%.0f" % (start_vars.nevermore_post_speed|float * 100))}%"
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.nevermore_post_speed|float}
      _HEAT_WAIT MSG="Nevermore post print chamber filtration timer..." MINUTES={start_vars.nevermore_post_run_time|int}
      M400
      {% if start_vars.nevermore_leave_running == False %}
        SET_FAN_SPEED FAN=Nevermore SPEED=0
        RESPOND TYPE=COMMAND MSG="Nevermore post print timer done, fan off."
      {% else %}
        RESPOND TYPE=COMMAND MSG="Nevermore post print timer done, leaving fan on."
      {% endif %}
    {% endif %}
      
  {% endif %}


#######################################################
# If you have a power on/off relay 
# This macro is used to shutdown your printer after printing
# It is called by the END_PRINT macro
#######################################################

[gcode_macro _GOODNIGHT]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

  {% if printer.extruder.temperature >= 50 %}
    M106 S255 # max part fan to cool
    SET_DISPLAY_TEXT MSG="Cooling hotend for shutdown"
    RESPOND TYPE=COMMAND MSG="Cooling hotend for shutdown"
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=49
    M400 # wait
  {% endif %}

    M107 # kill fan
    M117 GOODNIGHT...Zzzzzz
    M118 GOODNIGHT...Zzzzzz
    
  {% if start_vars.neopixel_led == True %}
    STATUS_OFF
  {% endif %}    
  
    UPDATE_DELAYED_GCODE ID=_DELAY_OFF DURATION=5
    


[delayed_gcode _DELAY_OFF]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
  {% if start_vars.shutdown_relay == True %}
    {% if start_vars.all_in_one_pi == True or start_vars.host_shutdown == True %}
      {action_call_remote_method("shutdown_machine")}

    {% elif start_vars.all_in_one_pi == False and start_vars.host_shutdown == False %}
      {action_call_remote_method("set_device_power",device="Printer Power",state="off")}
    {% endif %}
    
  {% else %}
    {action_raise_error("Sorry you have not got a shutdown relay installed. Check the demon_user_settings file hardware options to enable it")}
  {% endif %}

  

[gcode_macro Power_Down]
description: If you have a mains power relay this will power the relay off & shutdown the client
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

  {% if start_vars.shutdown_relay == True %}
    {action_call_remote_method("set_device_power",device="Printer Power",state="off")}
  {% else %}
   {action_raise_error("Sorry you have not got a shutdown relay installed. Check the demon_user_settings file hardware options to enable it")}
  {% endif %}



#######################################################
  # DEMON CLEAN LOAD ASSETS
#######################################################

[gcode_macro _CONDITIONAL_CLEAN]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
  {% if start_vars.nozzle_cleaner == True %}
    {% if (printer.configfile.settings.stepper_z.endstop_pin != 'probe:z_virtual_endstop') and (printer.configfile.settings.stepper_z.endstop_pin != 'probe: z_virtual_endstop') or ('smart_effector' in printer) or
          ('scanner' in printer) %}
      CLEAN_NOZZLE
    {% endif %}
  {% endif %}

  

[gcode_macro _step_control]
gcode:
  {% set clean_vars = printer["gcode_macro _CLEAN_VARIABLES"] %}
  {% set rando_x_clean = range((clean_vars.clean_min_x|int), (clean_vars.clean_max_x|int))|random %}
  {% set rando_y_clean = range((clean_vars.clean_min_y|int), (clean_vars.clean_max_y|int))|random %}
  
    G90

  {% if clean_vars.random_clean_x == True and clean_vars.random_clean_y == True %}
    G0 X{rando_x_clean|int} Y{rando_y_clean|int} F{clean_vars.pass_spd * 60|int}

  {% elif clean_vars.random_clean_x == True and clean_vars.random_clean_y == False %}
    G0 X{rando_x_clean|int} Y{clean_vars.linear_clean_start_y|int} F{clean_vars.pass_spd * 60|int}

  {% elif clean_vars.random_clean_x == False and clean_vars.random_clean_y == True %}
    G0 X{clean_vars.linear_clean_start_x|int} Y{rando_y_clean|int} F{clean_vars.pass_spd * 60|int}
  {% endif %}



[gcode_macro _LINEAR_STEP_CONTROL_X]
gcode:
  {% set clean_vars = printer["gcode_macro _CLEAN_VARIABLES"] %}
  
    G91
  {% if clean_vars.linear_clean_positive_dir == True %}
    G0 X{clean_vars.linear_clean_distance|int} F{clean_vars.pass_spd * 60|int}
  {% else %}
    G0 X-{clean_vars.linear_clean_distance|int} F{clean_vars.pass_spd * 60|int}
  {% endif %}
    G90
    G0 X{clean_vars.linear_clean_start_x|int} F{clean_vars.pass_spd * 60|int}    



[gcode_macro _LINEAR_STEP_CONTROL_Y]
gcode:
  {% set clean_vars = printer["gcode_macro _CLEAN_VARIABLES"] %}
    
    G91
  {% if clean_vars.linear_clean_positive_dir == True %}
    G0 Y{clean_vars.linear_clean_distance|int} F{clean_vars.pass_spd * 60|int}
  {% else %}
    G0 Y-{clean_vars.linear_clean_distance|int} F{clean_vars.pass_spd * 60|int}
  {% endif %}
    G90
    G0 Y{clean_vars.linear_clean_start_y|int} F{clean_vars.pass_spd * 60|int}    
          


[gcode_macro _random_spot]
gcode:
  {% set clean_vars = printer["gcode_macro _CLEAN_VARIABLES"] %}
  {% set rando_x = range((clean_vars.purge_min_x|int), (clean_vars.purge_max_x|int))|random %}

    G0 X{rando_x|int} Y{clean_vars.purge_legacy_y_park|float} F9000



#######################################################
# SYSTEM MACROS DO NOT EDIT
#######################################################
#######################################################
# for use with Klicky Probe, in some rare instances the probe can
# be still attached with the steppers engaged & another print can be started
# without the Klicky Macros checking if the probe is still attached.
# this fixes that!
#######################################################

[gcode_macro _klicky_check]
gcode:
    query_probe
    _probe_state action={ params.ACTION }


[gcode_macro _probe_state]
gcode:
  {% set query_probe_triggered = printer.probe.last_query %}
  {% set action  = params.ACTION|default('') %}
  
  {% if query_probe_triggered %}

  {% else %}
    Dock_Probe_Unlock  
  {% endif %}



[gcode_macro _KLICKY_UNLOCKER]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
  {% if start_vars.klicky_probe == True and printer.configfile.settings.stepper_z.endstop_pin == 'probe:z_virtual_endstop'%}
    RESPOND TYPE=COMMAND MSG="UNLOCKING Klicky Probe!"
    Dock_Probe_Unlock
  {% endif %}
  


[gcode_macro _HOMING_HELPER]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
    {% if start_vars.klicky_probe == True %}
      {% if printer.configfile.settings.stepper_z.endstop_pin == 'probe:z_virtual_endstop' %}
    #   {% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
        _SET_Z_PARK
        {% if "xyz" not in printer.toolhead.homed_axes %}
          {% if start_vars.neopixel_led == True %}
            STATUS_HOMING
          {% endif %}
    
          SET_DISPLAY_TEXT MSG="Homing..."
          RESPOND TYPE=COMMAND MSG="Homing..."
          G28 X Y
          ATTACH_PROBE_LOCK
          RESPOND TYPE=COMMAND MSG="Klicky Probe is now LOCKED!"
          G28 Z
        {% endif %}
        
      {% else %}
        _CONDITIONAL_HOME
      {% endif %}
       
    {% else %}   
      _CONDITIONAL_HOME
    {% endif %}
  


[gcode_macro _CONDITIONAL_HOME]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
    _SET_Z_PARK
  {% if "xyz" not in printer.toolhead.homed_axes %}
    {% if start_vars.neopixel_led == True %}
      STATUS_HOMING
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="Homing..."
    RESPOND TYPE=COMMAND MSG="Homing..."
  
    G28

  {% else %}
    {% if start_vars.klicky_probe == True %}
      _klicky_check
    {% endif %}
  {% endif %}
    M117
    M400



[gcode_macro M84]
rename_existing: M84.1
gcode:
    _SAVE
    M400
    _Z_READER
    M84.1
    UPDATE_DELAYED_GCODE ID=_ACTIVE_Z_MONITOR DURATION=0



[delayed_gcode _ACTIVE_Z_MONITOR]
gcode:
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if 'z' in printer.toolhead.homed_axes and printer.print_stats.state not in ["printing", "paused"] %}
    {% if printer.toolhead.position.z != core_vars.last_known_z %}
      _SAVE
      UPDATE_DELAYED_GCODE ID=_ACTIVE_Z_MONITOR DURATION=10
    {% else %}
      UPDATE_DELAYED_GCODE ID=_ACTIVE_Z_MONITOR DURATION=10
    {% endif %}
    
  {% elif 'z' in printer.toolhead.homed_axes and printer.print_stats.state in ["printing", "paused"] %}
    {% if printer.toolhead.position.z != core_vars.last_known_z %}
      _SAVE
      UPDATE_DELAYED_GCODE ID=_ACTIVE_Z_MONITOR DURATION=30
    {% else %}
      UPDATE_DELAYED_GCODE ID=_ACTIVE_Z_MONITOR DURATION=30
    {% endif %}
      
  {% else %}
   UPDATE_DELAYED_GCODE ID=_ACTIVE_Z_MONITOR DURATION=0
  {% endif %}

  

[gcode_macro _LOAD]
gcode:
  {% set svv = printer.save_variables.variables %}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=last_known_z VALUE={svv.last_known_z}
    RESPOND TYPE=COMMAND MSG="Z Tracker: Last known Z height was {svv.last_known_z}"

    SET_GCODE_VARIABLE MACRO=_POOP_VARIABLES VARIABLE=loaded_already VALUE={svv.loaded_state}
    # RESPOND TYPE=COMMAND MSG="Saved filament state loaded: {svv.loaded_state}"



[gcode_macro _SAVE]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  {% set driver_vars = printer["gcode_macro _DRIVER_VARS"] %}
  {% set svv = printer.save_variables.variables %}

  {% if driver_vars.z_lift_move == True %}
    SAVE_VARIABLE VARIABLE=last_known_z VALUE={("%.2f " % (core_vars.last_known_z + start_vars.pre_home_lift))}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=last_known_z VALUE={("%.2f " % (core_vars.last_known_z + start_vars.pre_home_lift))}
    SET_GCODE_VARIABLE MACRO=_DRIVER_VARS VARIABLE=z_lift_move VALUE=False
    M400
    
  {% elif core_vars.no_home_z_move == True %}
    SAVE_VARIABLE VARIABLE=last_known_z VALUE={("%.2f " % (core_vars.last_known_z))}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=no_home_z_move VALUE=False
    M400

  {% elif 'z' not in printer.toolhead.homed_axes %}
    
  {% else %}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=last_known_z VALUE={("%.2f " % (printer.toolhead.position.z))}
    SAVE_VARIABLE VARIABLE=last_known_z VALUE={("%.2f " % (printer.toolhead.position.z))}
    # M400
  {% endif %}
    
    # RESPOND TYPE=COMMAND MSG="Saving Z height"


  
[gcode_macro _Z_READER]
gcode:
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  # {% set driver_vars = printer["gcode_macro _DRIVER_VARS"] %}
  # {% set svv = printer.save_variables.variables %}
    RESPOND TYPE=COMMAND MSG="Z Tracker: Current Z height saved as {core_vars.last_known_z}"
    # RESPOND TYPE=COMMAND MSG="core_var Z height is {core_vars.last_known_z}"
    # RESPOND TYPE=COMMAND MSG="svv Z height is {svv.last_known_z}"
    # RESPOND TYPE=COMMAND MSG="no home move {core_vars.no_home_z_move}"
    # RESPOND TYPE=COMMAND MSG="z lift move {driver_vars.z_lift_move}"



[gcode_macro Z_ASCENDER]
description: Raise the toolhead by the selected distance if the printer is homed or not! 100mm max per activation USE WITH CAUTION!
gcode:
  # {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  {% set svv = printer.save_variables.variables %}
  {% set height = params.HEIGHT|default(15)|int %}
          
  {% if 'z' not in printer.toolhead.homed_axes %}
     RESPOND TYPE=COMMAND MSG="WARNING AXES RESET FOR Z LIFT!!"
     RESPOND TYPE=COMMAND MSG="EXTREME CAUTION! As the printer is NOT homed already Z0 will be the current toolhead position for the duration of this move! If commanded the Z axis will be able to pass Z maximum resulting in printer damage!!"
     SET_KINEMATIC_POSITION Z=0
     SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=no_home_z_move VALUE=True
     M400
     G90
    {% if height in range (0, 101) %}
      {% if core_vars.last_known_z <= (printer.toolhead.axis_maximum.z|int - height|int) - 20 %}
        G0 Z{height} F800
        M400
        RESPOND TYPE=COMMAND MSG="Move complete, now disabling axes"
        SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=last_known_z VALUE={("%.2f " % (core_vars.last_known_z + height))}
        M400
        M84

      {% else %}
        {action_raise_error("Request denied, operation cancelled! As the printer is NOT homed estimated toolhead height is too great for requested move!")}
      {% endif %}
      
    {% else %}
      {action_raise_error("Request denied, operation cancelled! Lift height not in range. The maximum single commanded movement range is 0-100mm")}
    {% endif %}
    
  {% else %}
    G90
    {% if height in range (0, 101) %}
      {% if printer.toolhead.position.z <= (printer.toolhead.axis_maximum.z|int - height|int) - 20 %}        
        G0 Z{(printer.toolhead.position.z + height)} F800
        M400
        M400
        _SAVE
        RESPOND TYPE=COMMAND MSG="Move complete!"

      {% else %}
        {action_raise_error("Request denied, operation cancelled! Actual toolhead height is too great for requested move!")}
      {% endif %}
        
    {% else %}
      {action_raise_error("Request denied, operation cancelled! Lift height not in range. The maximum single commanded movement range is 0-100mm")}
    {% endif %}
  {% endif %}



[gcode_macro _Z_PARK]
variable_z_park: 30
gcode:
  {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

  {% if start_vars.klicky_probe == True and printer.configfile.settings.stepper_z.endstop_pin == 'probe:z_virtual_endstop' %}
    Dock_Probe_Unlock
  {% endif %}
    # RESPOND TYPE=COMMAND MSG="z park is at {z_park}"
  {% if start_vars.use_custom_park == False %}
    G0 X{x_park} Y{y_park} Z{z_park} F10000

  {% else %}
    {% if start_vars.system_choose_z == True %}
      G0 X{start_vars.custom_park_x} Y{start_vars.custom_park_y} Z{z_park} F10000
    {% else %}
      {% if start_vars.custom_park_z|int <= 1|int or start_vars.custom_park_z|int >= (printer.toolhead.axis_maximum.z|int - start_vars.pre_home_lift|int) - 10 %}
        {action_raise_error("Custom Z parking height is to low or too high, change height in the demon user settings file to contiune")}
      {% else %}
        G0 X{start_vars.custom_park_x} Y{start_vars.custom_park_y} Z{start_vars.custom_park_z} F10000
      {% endif %}
    {% endif %}
  {% endif %}
    M400
    _SAVE



[gcode_macro _SET_Z_PARK]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set zp_vars = printer["gcode_macro _z_park"] %}

  {% if start_vars.system_choose_z == True %}
    {% if 'bltouch' in printer.configfile.config %}
      SET_GCODE_VARIABLE MACRO=_Z_PARK VARIABLE=z_park VALUE=25

    {% elif 'scanner' in printer %}
      SET_GCODE_VARIABLE MACRO=_Z_PARK VARIABLE=z_park VALUE=25

    {% elif 'smart_effctor' in printer %}
      SET_GCODE_VARIABLE MACRO=_Z_PARK VARIABLE=z_park VALUE=25

    {% elif ('mcu eddy' in printer.configfile.config) or ('probe_eddy_current btt_eddy' in printer) or ('probe_eddy_current eddy' in printer) %}
      SET_GCODE_VARIABLE MACRO=_Z_PARK VARIABLE=z_park VALUE=25

    {% elif start_vars.klicky_probe == True or printer.configfile.settings.stepper_z.endstop_pin != 'probe:z_virtual_endstop' %}
      SET_GCODE_VARIABLE MACRO=_Z_PARK VARIABLE=z_park VALUE=50

    {% else %}
      SET_GCODE_VARIABLE MACRO=_Z_PARK VARIABLE=z_park VALUE=5
    {% endif %}

  {% else %}
    SET_GCODE_VARIABLE MACRO=_Z_PARK VARIABLE=z_park VALUE={start_vars.custom_park_z}
  {% endif %}



[gcode_macro _ADAPTIVE_MANUAL_LEVELLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

  {% if start_vars.use_manual_levelling == True and ('bed_screws' in printer.configfile.config) and ('screws_tilt_adjust' not in printer.configfile.config) %}
    SET_DISPLAY_TEXT MSG="Manual Gantry Levelling: Bed Screws" 
    RESPOND TYPE=COMMAND MSG="Manual Gantry Levelling: Bed Screws" 
    {% if start_vars.neopixel_led == True %}
      STATUS_LEVELING
    {% endif %}
    BED_SCREWS_ADJUST 

  {% elif start_vars.use_manual_levelling == True and ('screws_tilt_adjust' in printer.configfile.config) %}
    SET_DISPLAY_TEXT MSG="Manual Gantry Levelling: Screws Tilt Calculate" 
    RESPOND TYPE=COMMAND MSG="Manual Gantry Levelling: Screws Tilt Calculate" 
    {% if start_vars.neopixel_led == True %}
      STATUS_LEVELING
    {% endif %}
    SCREWS_TILT_CALCULATE 

  {% else %}
    {action_raise_error("This error is caused by your printer not having bed_screws or screws_tilt_adjust defined! Please define these sections in the printer.cfg file")}
      
  {% endif %}
    M117



[gcode_macro _ADAPTIVE_LEVELLING]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

  {% if start_vars.use_manual_levelling == True %}
    SET_DISPLAY_TEXT MSG="Manaul levelling in use, Print_Start auto levelling bypassed"
    RESPOND TYPE=COMMAND MSG="Manaul levelling in use, Print_Start auto levelling bypassed"

  {% else %}
    {% if printer.configfile.settings.printer.kinematics == 'corexy' and ('z_tilt' in printer.configfile.config) %}
      {% if ('quad_gantry_level' not in printer.configfile.config) %}
        SET_DISPLAY_TEXT MSG="Gantry Levelling CoreXY Z Tilt" 
        RESPOND TYPE=COMMAND MSG="Gantry Levelling CoreXY Z Tilt"  
        {% if start_vars.neopixel_led == True %}
          STATUS_LEVELING
        {% endif %}
        Z_TILT_ADJUST
        M400
      {% endif %}
  
    {% elif printer.configfile.settings.printer.kinematics == 'corexy' and ('quad_gantry_level' in printer.configfile.config) %}
      SET_DISPLAY_TEXT MSG="Gantry Levelling" 
      RESPOND TYPE=COMMAND MSG="Gantry Levelling" 
      {% if start_vars.neopixel_led == True %}
        STATUS_LEVELING
      {% endif %}
      QUAD_GANTRY_LEVEL 
      M400
    
    {% elif printer.configfile.settings.printer.kinematics == 'cartesian' and ('z_tilt' in printer.configfile.config) %}
      SET_DISPLAY_TEXT MSG="Gantry Levelling" 
      RESPOND TYPE=COMMAND MSG="Gantry Levelling"  
      {% if start_vars.neopixel_led == True %}
        STATUS_LEVELING
      {% endif %}
      Z_TILT_ADJUST
      M400
      
    {% elif printer.configfile.settings.printer.kinematics == 'cartesian' and ('z_tilt' not in printer.configfile.config) %}
      RESPOND TYPE=COMMAND MSG="Levelling system not available, skipping Gantry Levelling"

    {% else %}
      {action_raise_error("This error is caused by your printer not supporting this feature! Please enable Manual Levelling in the demon_user_settings.cfg file")}
    
    {% endif %}
  {% endif %}
    M117



[gcode_macro _DEMON_PAUSE]
variable_offset_reset: False
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set ceal = printer["gcode_macro CUSTOM_EXPANSION_ACTIVE_LIST"] %}
  
  {% if printer.toolhead.position.z|float < 50 %}
    G0 Z50 F3600
  {% endif %}
    
  {% if start_vars.kill_fan_on_pause == True %}
    RESPOND TYPE=COMMAND MSG="Parts fan stopping for pause duration"
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=fan_speed VALUE={("%.2f " % (printer["fan"].speed|float))}
    M107
  {% endif %}

  {% if ceal.ceal_master_enable == True %}
    {% if ceal.pause == True %}
      _CUSTOM_PAUSE {rawparams}
    {% endif %}
  {% endif %}

  _SAVE



[gcode_macro _DEMON_CANCEL]
variable_offset_reset: False
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  {% set ceal = printer["gcode_macro CUSTOM_EXPANSION_ACTIVE_LIST"] %}
  
  {% if printer.print_stats.state != paused and printer.toolhead.position.z|float < 50 %}
    G0 Z50 F3600
  {% endif %}

    _OFFSET_RESET_CONTROL

    BED_MESH_CLEAR
    M220 S100 # reset feed rate to 100 percent
    M221 S100 # reset flow rate to 100 percent
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.config.printer.max_accel}
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.config.printer.max_velocity}
    
  {% if start_vars.encoder_runout_sensor == True %}
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
  {% endif %}

  {% if ceal.ceal_master_enable == True %}
    {% if ceal.cancel == True %}
      _CUSTOM_CANCEL {rawparams}
    {% endif %}
  {% endif %}
  
    _SAVE
  {% if start_vars.z_tracker_reduced_monitoring == False %}
    UPDATE_DELAYED_GCODE ID=_ACTIVE_Z_MONITOR DURATION=1
  {% endif %}


[gcode_macro _DEMON_RESUME]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  {% set resume = printer["gcode_macro RESUME"] %}
  {% set ceal = printer["gcode_macro CUSTOM_EXPANSION_ACTIVE_LIST"] %}

  {% if start_vars.chamber_heater == True %}
    UPDATE_DELAYED_GCODE ID=_CHAMBER_HEAT_CONTROL DURATION=1
    RESPOND TYPE=COMMAND MSG="Chamber Heater Monitor Active"
  {% endif %}

  {% if start_vars.bed_fans == True %}
    UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=1
    RESPOND TYPE=COMMAND MSG="Bed Fans Monitor Active"
  {% endif %}

  {% if start_vars.nevermore == True and resume.idle_state == True %}
    {% if core_vars.nm_fan_speed != 0 %}
      SET_FAN_SPEED FAN=Nevermore SPEED={core_vars.nm_fan_speed|float}
      RESPOND TYPE=COMMAND MSG="Restoring Nevermore fan speed"
      M400
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=nm_fan_speed VALUE=0
    {% endif %}
  {% endif %}

    SET_DISPLAY_TEXT MSG="Resuming print!"
    RESPOND TYPE=COMMAND MSG="Resuming print!"
    
  {% if start_vars.kill_fan_on_pause == True %}
    M106 S{("%.0f " % (core_vars.fan_speed|float * 255))} 
    RESPOND TYPE=COMMAND MSG="Restoring parts fan speed"
  {% endif %}

  {% if ceal.ceal_master_enable == True %}
    {% if ceal.resume == True %}
      _CUSTOM_RESUME {rawparams}
    {% endif %}
  {% endif %}
  

  
[gcode_macro _DEMON_IDLE_TIMEOUT]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
  {% if start_vars.nevermore == True and printer["fan_generic Nevermore"].speed != 0 %}
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=nm_fan_speed VALUE={printer["fan_generic Nevermore"].speed|float}
    SET_FAN_SPEED FAN=Nevermore SPEED=0
  {% endif %}
  
  {% if printer.print_stats.state == "paused" %}
    {% if start_vars.infinite_pause == True %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=True
      M107
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
      SET_DISPLAY_TEXT MSG="Idle timeout: Infinite pause running, nozzle powered down, auto re-heat enabled. Waiting for user..."
      RESPOND TYPE=COMMAND MSG="Idle timeout: Infinite pause running, nozzle powered down, auto re-heat enabled. Waiting for user..."
      _SAVE

    {% else %}
      SET_DISPLAY_TEXT MSG="PRINT CANCELLED! Pause timed out! Please enable variable_infinite_pause in demon_user_settings.cfg to avoid this & restart your print"
      RESPOND TYPE=COMMAND MSG="PRINT CANCELLED! Pause timed out! Please enable variable_infinite_pause in demon_user_settings.cfg to avoid this & restart your print"
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=nm_fan_speed VALUE=0
      CANCEL_PRINT
      M84
      {% if start_vars.timeout_power == True and start_vars.shutdown_relay == True %}
        _GOODNIGHT
      {% endif %}
    {% endif %}
    
  {% else %}
    SET_DISPLAY_TEXT MSG="Idle Timeout"
    RESPOND TYPE=COMMAND MSG="Idle Timeout"
    TURN_OFF_HEATERS
    M84
    {% if start_vars.timeout_power == True and start_vars.shutdown_relay == True %}
      _GOODNIGHT
    {% endif %}
    
  {% endif %}

  


[gcode_macro _FIL_CHANGE_PARK]
gcode: 
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

    SET_DISPLAY_TEXT MSG="Moving to filament change position, use load/unload macros when ready!"
    RESPOND TYPE=COMMAND MSG="Moving to filament change position, use load/unload macros when ready!"
    PAUSE X={start_vars.filament_change_park_x} Y={start_vars.filament_change_park_y} Z_MIN={start_vars.filament_change_park_min_z} RESTORE=0
    _SAVE


[gcode_macro _MAX_EXTRUDE_CHECK]
gcode:
  {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}
  
  {% if max_velocity == 7982.432411074328 %}
    {action_raise_error("Please set a feedrate mm per second max_extrude_only_velocity in your printer.cfg [extruder] section. e.g. max_extrude_only_velocity: 12")}
  {% endif %}
  
  {% if max_velocity > 1260 %}
    {action_raise_error("WARNING! Your printer's max_extrude_only_velocity setting is too high! The operation has been cancelled to prevent damage to your extruder! Reset to a feedrate value below 20mm/s in your printer.cfg [extruder] section")}
  {% endif %}



[gcode_macro _RUNOUT_SENSOR_CHECK]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

  {% if start_vars.runout_sensor == True %}
    {% if printer['filament_switch_sensor filament_sensor'].enabled == 1 %}
      {% if not printer["filament_switch_sensor filament_sensor"].filament_detected %} # Runout Sensor Check, E-Stop if empty! 
        {action_raise_error("This error is caused by no being filament loaded! Please load filament & retry!")}
      {% else %}
        RESPOND TYPE=COMMAND MSG="Runout sensor: Enabled, filament check passed"
      {% endif %}
    
    {% elif printer['filament_switch_sensor filament_sensor'].enabled != 1 %}
      RESPOND TYPE=COMMAND MSG="Runout sensor: Disabled, filament check skipped"
    {% endif %} 
  {% endif %}



[gcode_macro _ENCODER_FEED_CHECK_PREP]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
    {% if start_vars.encoder_runout_sensor == True %}
      {% if printer['filament_motion_sensor encoder_sensor'].enabled != 1 %}
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
      {% endif %} 
    {% endif %}


[gcode_macro _ENCODER_FEED_CHECK]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
    {% if start_vars.encoder_runout_sensor == True %}
      {% if not printer["filament_motion_sensor encoder_sensor"].filament_detected %} # Runout Sensor Check, stop if empty! 
        {% if printer.print_stats.state == "paused" %}
          RESPOND TYPE=error MSG="Encoder filament sensor triggered! This error is caused by the filament not being taken up by the extruder, or the nozzle is clogged! Please check filament state & try again!"
        {% else %}
          {action_raise_error("Encoder filament sensor triggered! This error is caused by the filament not being taken up by the extruder, or the nozzle is clogged! Please check filament state & try again!")}
        {% endif %}
      {% endif %}
      
      UPDATE_DELAYED_GCODE ID=_ENCODER_RUNOUT_CONTROL DURATION=5
    {% endif %}
     
  

[delayed_gcode _ENCODER_RUNOUT_CONTROL]
gcode:

  {% if printer.print_stats.state not in ['printing', 'paused'] %}
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    UPDATE_DELAYED_GCODE ID=_ENCODER_RUNOUT_CONTROL DURATION=0

  {% elif printer.print_stats.state in ['printing', 'paused'] %}
    {% if printer.print_stats.info.current_layer in range(0, 2) %}
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
      UPDATE_DELAYED_GCODE ID=_ENCODER_RUNOUT_CONTROL DURATION=10 
    {% else %}
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
      UPDATE_DELAYED_GCODE ID=_ENCODER_RUNOUT_CONTROL DURATION=0
      RESPOND TYPE=COMMAND MSG="Layer 1 complete, encoder runout sensor enabled"
    {% endif %}
  {% endif %}



[gcode_macro _RESET_FILE_STATE]
gcode:

  {% if printer.print_stats.state not in ["printing", "paused", "busy"] %}
    SDCARD_RESET_FILE
    SET_DISPLAY_TEXT MSG="Printer State reset to Standby"
    G4 P5000
    M117
  {% else %}
    SET_DISPLAY_TEXT MSG="File reset denied, printer is busy"
    RESPOND TYPE=error MSG="File reset denied, printer is busy"
  {% endif %}


[gcode_macro PRINTER_STATUS]
description: Checks the current status of your system!
gcode:
  {% if "xyz" != printer.toolhead.homed_axes%}
    RESPOND TYPE=COMMAND MSG="Homed Axes: None"
  {% else %}
    RESPOND TYPE=COMMAND MSG="Homed Axes: {printer.toolhead.homed_axes}"
  {% endif %}
    
  {% if printer.print_stats.state == "standby" and printer.idle_timeout.state == "Printing" %}
   RESPOND TYPE=COMMAND MSG="Printer timeout state: Busy"
  {% else %}
    RESPOND TYPE=COMMAND MSG="Printer timeout state: {printer.idle_timeout.state}"
  {% endif %}
    
    RESPOND TYPE=COMMAND MSG="Printer status: {printer.print_stats.state}"
    RESPOND TYPE=COMMAND MSG="Virtual SDcard is active: {printer.virtual_sdcard.is_active}"
  
  {% if printer.print_stats.state in ["printing", "paused"] %}
    RESPOND TYPE=COMMAND MSG="Virtual SDcard print progess in percent: {printer.virtual_sdcard.progress}"
    RESPOND TYPE=COMMAND MSG="File: {printer.print_stats.filename}"
    RESPOND TYPE=COMMAND MSG="Info: {printer.print_stats.info}"
    RESPOND TYPE=COMMAND MSG="{printer.print_stats.message}"
  {% endif %}

  
  
[gcode_macro SYSTEM_SENSORS]
description: Shows you the system names of available sensors on your printer
gcode:
  { action_respond_info(printer.heaters.available_heaters | join(' | ')) }
  { action_respond_info(printer.heaters.available_sensors | join(' | ')) }   



[delayed_gcode _welcome]
initial_duration: 2
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set svv = printer.save_variables.variables %}
  
  {% if svv.using_shell == True %}
    _DISK_SPACE_CHECK
  {% else %}
    RESPOND TYPE=command MSG="Shell script extension not in use. Disk_Space_Check disbaled."
  {% endif %}

    _DEMON_VERSION
    _LOAD
    
  {% if printer.print_stats.state not in ['printing', 'paused'] %}
    SET_DISPLAY_TEXT MSG="{start_vars.screen_msg}"
    RESPOND TYPE=COMMAND MSG="{start_vars.console_msg}"
  {% endif %}
     


[delayed_gcode _USER_FILES_CHECK]
initial_duration: 10
gcode:

  {% if not printer["gcode_macro _START_VARIABLES"] %}
    RESPOND TYPE=error MSG="WARNING: The demon_user_settings cfg file is NOT included in the system! Please include this file & set it up BEFORE you try to print!"
    SET_DISPLAY_TEXT MSG="WARNING: The demon_user_settings cfg file is NOT included in the system! Please include this file & set it up BEFORE you try to print!"

  {% elif not printer["gcode_macro _CLEAN_VARIABLES"] %}
    RESPOND TYPE=error MSG="WARNING: The demon_user_settings_cleaner_variables cfg file is NOT included in the system! Please include this file & set it up BEFORE you try to print!"
    SET_DISPLAY_TEXT MSG="WARNING: The demon_user_settings_cleaner_variables cfg file is NOT included in the system! Please include this file & set it up BEFORE you try to print!"

  {% elif not printer["gcode_macro CUSTOM_EXPANSION_ACTIVE_LIST"] %}
    RESPOND TYPE=error MSG="WARNING: The demon_custom_expansion cfg file is NOT included in the system! Please include this file & set it up BEFORE you try to print!"
    SET_DISPLAY_TEXT MSG="WARNING: The demon_custom_expansion cfg file is NOT included in the system! Please include this file & set it up BEFORE you try to print!"
  {% endif %}

  {% if 'force_move' not in printer.configfile.config %}
    RESPOND TYPE=error MSG="WARNING: The force_move printer.cfg section is missing. Please make sure it's correctly added to your printer.cfg!"
    SET_DISPLAY_TEXT MSG="WARNING: The force_move printer.cfg section is missing. Please make sure it's correctly added to your printer.cfg!"
  {% endif %}

  {% if 'respond' not in printer.configfile.config %}
    RESPOND TYPE=error MSG="WARNING: The respond printer.cfg section is missing. Please make sure it's correctly added to your printer.cfg!"
    SET_DISPLAY_TEXT MSG="WARNING: The respond printer.cfg section is missing. Please make sure it's correctly added to your printer.cfg!"
  {% endif %}

  {% if 'save_variables' not in printer.configfile.config %}
    RESPOND TYPE=error MSG="WARNING: The save_variables printer.cfg section is missing. Please make sure it's correctly added to your printer.cfg!"
    SET_DISPLAY_TEXT MSG="WARNING: The save_variables printer.cfg section is missing. Please make sure it's correctly added to your printer.cfg!"
  {% endif %}

  {% if 'exclude_object' not in printer.configfile.config %}
    RESPOND TYPE=error MSG="WARNING: The exclude_object printer.cfg section is missing. Please make sure it's correctly added to your printer.cfg!"
    SET_DISPLAY_TEXT MSG="WARNING: The exclude_object printer.cfg section is missing. Please make sure it's correctly added to your printer.cfg!"
  {% endif %}



[gcode_macro _DEMON_VERSION_MISMATCH]
gcode:
    {action_raise_error("This error is caused by Demon_version mismatch please check and update your Demon Essentials Macro files!")}



[gcode_macro _DEMON_VARS_UPDATER]
gcode:

    # SAVE_VARIABLE VARIABLE=first_boot VALUE=True
    # SAVE_VARIABLE VARIABLE=first_boot_msg VALUE=False
    # SAVE_VARIABLE VARIABLE=last_known_z VALUE=0
    SAVE_VARIABLE VARIABLE=loaded_state VALUE=False
    # SAVE_VARIABLE VARIABLE=updated_cleaner VALUE=False
    # SAVE_VARIABLE VARIABLE=updated_expansion VALUE=False
    # SAVE_VARIABLE VARIABLE=updated_settings VALUE=False
    # SAVE_VARIABLE VARIABLE=using_shell VALUE=False
    SAVE_VARIABLE VARIABLE=version_dvars VALUE='"1.0.1"'
    SAVE_VARIABLE VARIABLE=version_dvars_updated VALUE=True

    RESPOND TYPE=COMMAND MSG="demon_vars.cfg file updated to new version! AUTO RESTARTING NOW!"
    RESTART


[gcode_macro _DEMON_VERSION]
variable_demon_user_settings_version: "2.9.5"
variable_demon_clnvars_version: "1.1.1"
variable_demon_ceal_version: "1.0.1"
variable_demon_demon_vars_version: "1.0.1"
variable_demon_clean_load_version: "1.9.3"
variable_demon_setup_hlpr_version: "1.5.3"
variable_demon_z_cal_version: "1.6.2"
variable_demon_prpr_menu: "1.2.0"
variable_demon_mesh_bldr_version: "1.5.2"
variable_demon_apa_version: "1.2.0"
variable_demon_bed_fans_version: "1.3.0"
variable_demon_core_version: "1.4.2"
variable_demon_prnt_strt_version: "2.9.6"
variable_demon_chmbr_htr_version: "1.1.1"
variable_demon_aes_version: "1.1.0"
variable_demon_home_ctrl_version: "1.4.1"

gcode:
  {% set dvv = printer["gcode_macro _DEMON_VERSION_VARS"] %}
  {% set svv = printer.save_variables.variables %}
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set clean_load_ver = printer["gcode_macro _CLEAN_LOAD_VERSION"] %}
  {% set setup_helpers_ver = printer["gcode_macro _SETUP_HELPERS_VERSION"] %}
  {% set z_cal_ver = printer["gcode_macro _Z_CALIBRATION_VERSION"] %}
  {% set prepare_menu_ver = printer["gcode_macro _PREPARE_MENU_VERSION"] %}
  {% set mesh_builder_ver = printer["gcode_macro _MESH_BUILDER_VERSION"] %}
  {% set pa_vars = printer["gcode_macro _PA_VERSION"] %}
  {% set bed_fans_ver = printer["gcode_macro _BED_FANS_VERSION"] %}
  {% set core_ver = printer["gcode_macro _CORE_VERSION"] %}
  {% set print_start_ver = printer["gcode_macro _PRINT_START_VERSION"] %}
  {% set chamber_heater_ver = printer["gcode_macro _CHAMBER_HEATER_VERSION"] %}
  {% set aes_ver = printer["gcode_macro _AES_VERSION"] %}
  {% set home_ver = printer["gcode_macro _HOME_VERSION"] %}
  {% set clean_vars_ver = printer["gcode_macro _CLEAN_VARS_VER"] %}
  {% set ceal_ver = printer["gcode_macro _CEAL_VERSION"] %}

  {% if svv.version_dvars|string != demon_demon_vars_version|string %}
    _DEMON_VARS_UPDATER

  {% else %}
  
    {% if svv.version_dvars_updated == True and svv.using_shell == True %}
      SAVE_VARIABLE VARIABLE=version_dvars_updated VALUE=False
      RESPOND TYPE=COMMAND MSG="WARNING: Demon_Vars FILE HAS BEEN UPDATED! Default settings are in effect!"
      _UPDATE_DEMON_VARS_CONFIRM
    {% endif %}

    {% if start_vars.demon_version|string != demon_user_settings_version|string %}
      {% if svv.using_shell == True %}
        {% if printer.print_stats.state not in ['printing', 'paused', 'busy'] %}
          _USER_SETTINGS_FILE_PROMPT
        {% else %}
          RESPOND TYPE=error MSG="DEMON_USER_SETTINGS VERSION_MISMATCH"
          _DEMON_VERSION_MISMATCH
        {% endif %}  
      {% else %}
        RESPOND TYPE=error MSG="DEMON_USER_SETTINGS VERSION_MISMATCH"
        _DEMON_VERSION_MISMATCH
      {% endif %}

    {% elif clean_vars_ver.demon_clean_vars_ver|string != demon_clnvars_version|string %}
      {% if svv.using_shell == True %}
        {% if printer.print_stats.state not in ['printing', 'paused', 'busy'] %}
          _USER_CLEANER_FILE_PROMPT
        {% else %}
          RESPOND TYPE=error MSG="DEMON_USER_SETTINGS_CLEANER_VARIABLES_VERSION_MISMATCH"
          _DEMON_VERSION_MISMATCH
        {% endif %}
      {% else %}
        RESPOND TYPE=error MSG="DEMON_USER_SETTINGS_CLEANER_VARIABLES_VERSION_MISMATCH"
        _DEMON_VERSION_MISMATCH
      {% endif %}

    {% elif ceal_ver.demon_ceal|string != demon_ceal_version|string %}
      {% if svv.using_shell == True %}
        {% if printer.print_stats.state not in ['printing', 'paused', 'busy'] %}
          _USER_EXPANSION_FILE_PROMPT
        {% else %}
          RESPOND TYPE=error MSG="DEMON_USER_SETTINGS_CEAL_VERSION_MISMATCH"
          _DEMON_VERSION_MISMATCH
        {% endif %}   
      {% else %}
        RESPOND TYPE=error MSG="DEMON_USER_SETTINGS_CEAL_VERSION_MISMATCH"
        _DEMON_VERSION_MISMATCH
      {% endif %}

  # {% elif svv.version_dvars|string != demon_demon_vars_version|string %}
    # {% if svv.using_shell == True %}
      # {% if printer.print_stats.state not in ['printing', 'paused', 'busy'] %}
        # _DEMON_VARS_PROMPT
      # {% else %}
    #     RESPOND TYPE=error MSG="DEMON_VARS_VERSION_MISMATCH"
    #     _DEMON_VERSION_MISMATCH
    #   {% endif %}   
    # {% else %}
    #   RESPOND TYPE=error MSG="DEMON_VARS_VERSION_MISMATCH"
    #   _DEMON_VERSION_MISMATCH
    # {% endif %}

     {% elif clean_load_ver.demon_clean_load|string != demon_clean_load_version|string %}
      RESPOND TYPE=error MSG="DEMON_CLEAN_LOAD_VERSION_MISMATCH"
      _DEMON_VERSION_MISMATCH 

    {% elif setup_helpers_ver.demon_setup|string != demon_setup_hlpr_version|string %}
      RESPOND TYPE=error MSG="DEMON_SETUP_HELPERS_VERSION_MISMATCH"
      _DEMON_VERSION_MISMATCH

    {% elif z_cal_ver.demon_z_cal|string != demon_z_cal_version|string %}
      RESPOND TYPE=error MSG="DEMON_ZCAL_VERSION_MISMATCH"
      _DEMON_VERSION_MISMATCH   

    {% elif prepare_menu_ver.demon_prepare_menu|string != demon_prpr_menu|string %}
      RESPOND TYPE=error MSG="DEMON_PREPARE_MENU_VERSION_MISMATCH"
      _DEMON_VERSION_MISMATCH

    {% elif mesh_builder_ver.demon_mesh_builder|string != demon_mesh_bldr_version|string %}
      RESPOND TYPE=error MSG="DEMON_MESH_BUILDER_VERSION_MISMATCH"
      _DEMON_VERSION_MISMATCH 

    {% elif pa_vars.demon_apa|string != demon_apa_version|string %}
      RESPOND TYPE=error MSG="DEMON_PA_VERSION_MISMATCH"
      _DEMON_VERSION_MISMATCH 

    {% elif bed_fans_ver.demon_bed_fans|string != demon_bed_fans_version|string %}
      RESPOND TYPE=error MSG="DEMON_BED_FANS_VERSION_MISMATCH"
      _DEMON_VERSION_MISMATCH 

    {% elif core_ver.demon_core_ver|string != demon_core_version|string %}
      RESPOND TYPE=error MSG="DEMON_CORE_VERSION_MISMATCH"
      _DEMON_VERSION_MISMATCH

    {% elif print_start_ver.demon_start_ver|string != demon_prnt_strt_version|string %}
      RESPOND TYPE=error MSG="DEMON_PRINT_START_VERSION_MISMATCH"
      _DEMON_VERSION_MISMATCH

    {% elif chamber_heater_ver.demon_chamber_heater_ver|string != demon_chmbr_htr_version|string %}
      RESPOND TYPE=error MSG="DEMON_CHAMBER_HEATER_VERSION_MISMATCH"
      _DEMON_VERSION_MISMATCH

    {% elif aes_ver.demon_aes_ver|string != demon_aes_version|string %}
      RESPOND TYPE=error MSG="DEMON_AES_VERSION_MISMATCH"
      _DEMON_VERSION_MISMATCH

    {% elif home_ver.demon_home_ver|string != demon_home_ctrl_version|string %}
      RESPOND TYPE=error MSG="DEMON_HOME_VERSION_MISMATCH"
      _DEMON_VERSION_MISMATCH

    {% else %}
      RESPOND TYPE=COMMAND MSG="PRINTER CHECK: PASSED"
    {% endif %}

    {% if svv.using_shell == True %}
      _UPDATED
    {% endif %} 
  {% endif %}



[gcode_macro _CORE_VERSION]
variable_demon_core_ver: "1.4.2"
gcode:


    
    
