
###################################################
#######>>>>>>>>>>  3DPrintDemon  <<<<<<<<<<<#######
#######   https://github.com/3DPrintDemon   #######
# The idea for this macro is inspired by the contribution of Karl L, his original macro is at the end of this file


[gcode_macro QUICK_MESH]
description: Build a quick & dirty mesh at current temps. It will NOT level your machine first!! Choose profile name! Compatible with Eddy Probe!
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set profile = params.PROFILE|default('QUICK_MESH')|string %}
    G90
    _SET_Z_PARK
    _HOMING_HELPER
    
  {% if start_vars.neopixel_led == True %}
    STATUS_MESHING
  {% endif %}
  
  {% if ('mcu eddy' in printer.configfile.config) or ('probe_eddy_current btt_eddy' in printer) or ('probe_eddy_current eddy' in printer) %}
    BED_MESH_CALIBRATE PROFILE={profile} METHOD=rapid_scan
    
  {% else %}
    BED_MESH_CALIBRATE PROFILE={profile}
  {% endif %}

    _Z_PARK

  {% if start_vars.neopixel_led == True %}
    STATUS_READY
  {% endif %}

    M117

    

[gcode_macro HOT_MESH]
description: Build an accurate mesh with the proper full process. Choose profile name & more! Compatible with Eddy Probe!
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set profile = params.PROFILE|default('HOT_MESH')|string %}
  {% set nozzle = params.NOZZLE|default(160)|int %}
  {% set bed = params.BED|default(60)|int %}
  {% set soak = params.HEATSOAK|default('Yes')|string %}
  {% set time = params.TIMER|default(10)|int %}
  
    G90
    _SET_Z_PARK
    {% if start_vars.neopixel_led == True %}
      STATUS_HEATING
    {% endif %}

    SET_DISPLAY_TEXT MSG="HEATING..."
    RESPOND TYPE=COMMAND MSG="HEATING..."
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={nozzle}
    
    SET_DISPLAY_TEXT MSG="Waiting for Nozzle temp..."
    RESPOND TYPE=COMMAND MSG="Waiting for Nozzle temp..."
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={nozzle|int - 5} MAXIMUM={nozzle|int + 5}
    
    _HOMING_HELPER

    SET_DISPLAY_TEXT MSG="Waiting for bed temp..."
    RESPOND TYPE=COMMAND MSG="Waiting for bed temp..."  
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed|int -2} MAXIMUM={bed|int + 5}

    {% if soak|lower in ['yes', 'true'] %}
      RESPOND TYPE=COMMAND MSG="Running Heatsoak timer..."
      _HEAT_WAIT MSG="Hot Mesh heatsoak timer..." MINUTES={time|int}
      M400
      G28 Z

    {% elif soak|lower in ['no', 'false'] %}
      RESPOND TYPE=COMMAND MSG="Heatsoak timer skipped"

    {% else %}
      RESPOND TYPE=error MSG="Hot Mesh heatsoak timer skipped. User input not recognised! Please use yes/no or true/false"
    {% endif %}
    
    {% if start_vars.nozzle_cleaner == True %}
      CLEAN_NOZZLE
    {% endif %}
    
    {% if start_vars.neopixel_led == True %}
      STATUS_LEVELING
    {% endif %}

    {% if start_vars.use_manual_levelling == True %}
      _ADAPTIVE_MANUAL_LEVELLING
      
    {% else %}
      _ADAPTIVE_LEVELLING
    {% endif %}
  
     {% if start_vars.neopixel_led == True %}
       STATUS_MESHING
     {% endif %}
     
     
     {% if ('mcu eddy' in printer.configfile.config) or ('probe_eddy_current btt_eddy' in printer) or ('probe_eddy_current eddy' in printer) %}
       G0 Z10
       BED_MESH_CALIBRATE PROFILE={profile} METHOD=rapid_scan
       G0 Z10
       
     {% else %}
       BED_MESH_CALIBRATE PROFILE={profile}
     {% endif %}
      
     _Z_PARK

     {% if start_vars.neopixel_led == True %}
       STATUS_READY
     {% endif %}

    TURN_OFF_HEATERS
    M117
  


[gcode_macro AUTO_BED_MESH_BUILDER]
description: Fully automated 5 mesh builder. Choose which meshes to build, if no values set defaults will used or settings in demon_user_settings! If chamber fan/sensor enabled macro uses TEMPERATURE_WAIT not timers. Compatible with Eddy Probe!
gcode:
    {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
    {% set mesh_vars = printer["gcode_macro _MESH_BUILDER_VARIABLES"] %}
    {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}
    {% set build_pla = params.BUILD_PLA|default('Yes')|string %}
    {% set build_tpu = params.BUILD_TPU|default('Yes')|string %}
    {% set build_petg = params.BUILD_PETG|default('Yes')|string %}
    {% set build_asa = params.BUILD_ASA|default('Yes')|string %}
    {% set build_abs = params.BUILD_ABS|default('Yes')|string %}
    {% set nosoak = params.SKIP_HEATSOAK_WAITS|default('No')|string %}
    {% set lotimer = params.LOW_TEMP_TIMER|default(0)|int %}
    {% set hitimer = params.HI_TEMP_TIMER|default(0)|int %}
    {% set lothreshold = params.LO_TEMP_THRESHOLD|default(22)|int %}
    {% set hithreshold = params.HI_TEMP_THRESHOLD|default(42)|int %}
    {% set bedfans = params.USE_BED_FANS|default('No')|string %}

#############################################################################################################  

    _CHAMBER_SENSOR_DEFINE

  {% if bedfans|lower in ['yes', 'true'] and start_vars.bed_fans == True %}
    
    SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=use_bed_fans VALUE=True
    SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE=True
    RESPOND TYPE=COMMAND MSG="Use bed fans: True"

  {% elif bedfans|lower in ['yes', 'true'] and start_vars.bed_fans == False %}
    RESPOND TYPE=error MSG="Sorry no bed fans in the system to enable"

  {% elif bedfans|lower in ['no', 'false'] and start_vars.bed_fans == True %}
    SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=use_bed_fans VALUE=False
    RESPOND TYPE=COMMAND MSG="Use bed fans: False"

  {% elif bedfans|lower in ['no', 'false'] and start_vars.bed_fans == False %}
    SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=use_bed_fans VALUE=False
    RESPOND TYPE=COMMAND MSG="Use bed fans: False - no fans available!"

  {% else %}
    RESPOND TYPE=error MSG="Mesh Builder. Use bed fans, user input not recognised! Please use yes/no or true/false"
    
  {% endif %}

  {% if start_vars.chamber_fan == False and start_vars.chamber_sensor == False %}
    {% if 'LOW_TEMP_TIMER' not in params and 'HI_TEMP_TIMER' not in params %}
      RESPOND TYPE=error MSG="Mesh Builder. No macro button heatsoak timers set, using saved file values. See demon_user_settings"
    {% endif %}
  
    {% if 'LOW_TEMP_TIMER' in params %}
      {% if lotimer <= 0 %}
        RESPOND TYPE=COMMAND MSG="Mesh heatsoak timer cannot be 0, value of 1 or higher can be accepted. Timer set for 1 minute."
        SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=mesh_lo_temp_timer VALUE=1
    
      {% elif lotimer >= 1 %}
        RESPOND TYPE=COMMAND MSG="Mesh heatsoak. Low temp timer set to {lotimer|int} minutes"
        SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=mesh_lo_temp_timer VALUE={'LOW_TEMP_TIMER'|int}
      {% endif %}

    {% else %}  
    {% endif %}

    {% if 'HI_TEMP_TIMER' in params %}
      {% if hitimer <= 0 %}
        RESPOND TYPE=COMMAND MSG="Mesh heatsoak timer cannot be 0, value of 1 or higher can be accepted. Timer set for 1 minute."
        SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=mesh_hi_temp_timer VALUE=1
    
      {% elif hitimer >= 1 %}
        RESPOND TYPE=COMMAND MSG="Mesh heatsoak. High temp timer set to {hitimer|int} minutes"
        SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=mesh_hi_temp_timer VALUE={hitimer|int}
      {% endif %}

    {% else %}  
    {% endif %}

  {% elif start_vars.chamber_fan == True or start_vars.chamber_sensor == True %}
    RESPOND TYPE=error MSG="Mesh Builder. Chamber fan/sensor detected, using TEMPERATURE_WAIT instead of the timers!"
   
    {% if 'LO_TEMP_THRESHOLD' not in params and 'HI_TEMP_THRESHOLD' not in params %}
      RESPOND TYPE=error MSG="Mesh Builder. No macro button thresholds set, using saved file values. See demon_user_settings"
    {% endif %}

    {% if 'LO_TEMP_THRESHOLD' in params %}
      {% if lothreshold in range (15, 41) %}
        RESPOND TYPE=COMMAND MSG="Mesh Builder. Low temp chamber thershold set to {lothreshold|int}c"
        SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=lo_heat_soak_threshold VALUE={lothreshold|int}

      {% else %}
        RESPOND TYPE=error MSG="Mesh Builder. Low temp threshold outside of accepted range, values of 15-40c can be accepted. Low threshold set to saved value"
      {% endif %}
    {% endif %}

    {% if 'HI_TEMP_THRESHOLD' in params %}
      {% if hithreshold in range (40, 70) %}
        RESPOND TYPE=COMMAND MSG="Mesh Builder. HIGH temp chamber thershold set to {hithreshold|int}c"
        SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=hi_heat_soak_threshold VALUE={hithreshold|int}

      {% else %}
        RESPOND TYPE=error MSG="Mesh Builder. High temp threshold outside of accepted range, values of 40-70c can be accepted. High threshold set to saved value"
      {% endif %}
    {% endif %}

  {% endif %}

  {% if build_tpu|lower not in ['yes', 'true'] and build_pla|lower not in ['yes', 'true'] and build_petg|lower not in ['yes', 'true'] and build_asa|lower not in ['yes', 
    'true'] and build_abs|lower not in ['yes', 'true'] %}
    { action_raise_error("No mesh specified, operation cancelled") }
  {% endif %}
  

  {% if start_vars.printer_lights == True %}  
    {% if printer["Printer_Lights"] != start_vars.printer_lights_print %}
      SET_PIN PIN=Printer_Lights VALUE={start_vars.printer_lights_print}
    {% endif %}
  {% endif %}  

    SET_DISPLAY_TEXT MSG="Building Bed Meshes PLEASE WAIT...."
    RESPOND TYPE=echo MSG="NOTE: THIS IS A LONG MACRO! IT BUILDS 5 FULL MESHES! DO NOT PRESS SAVE CONFIG! THIS MACRO AUTO SAVES WHEN COMPLETE!! BUILDING WILL START SOON PLEASE WAIT..."
    G4 P20000
    G90 ; Use absoulte coordinates
    M83 ; Extruder relative mode
    SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset
    BED_MESH_CLEAR       # Clears currently loaded mesh    

  {% if start_vars.neopixel_led == True %}
    STATUS_HEATING
  {% endif %}
    
  {% if printer.configfile.settings.stepper_z.endstop_pin != 'probe:z_virtual_endstop' %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.pla_noz_pre}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.pla_noz_pre|float -5} MAXIMUM={start_vars.pla_noz_pre|float + 5}

  {% else %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=90
    
  {% endif %}

    _CONDITIONAL_HOME

#############################################################################################################

  {% if build_tpu|lower in ['yes', 'true'] %}
    RESPOND TYPE=COMMAND MSG="Building TPU mesh"
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=filament VALUE='"TPU"'
    _Z_PARK
    {% if start_vars.neopixel_led == True %}
      STATUS_HEATING 
    {% endif %}
                                        
    SET_DISPLAY_TEXT MSG="Waiting For TPU Mesh Bed Temp: {mesh_vars.mesh_tpu_bed_temp}c"                
    RESPOND TYPE=echo MSG="Waiting For TPU Mesh Bed Temp: {mesh_vars.mesh_tpu_bed_temp}c"             
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={mesh_vars.mesh_tpu_bed_temp} 
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={mesh_vars.mesh_tpu_bed_temp|float -2} MAXIMUM={mesh_vars.mesh_tpu_bed_temp|float + 5}      

    {% if nosoak|lower in ['yes', 'true'] %}
      RESPOND TYPE=error MSG="HEATSAOK SKIPPED this may lead to a less accurate mesh!"
      
    {% elif nosoak|lower in ['no', 'false'] %}
      _WAIT_HANDLING_LOW_TEMP
      
    {% else %}
      RESPOND TYPE=error MSG="Mesh heatsoak. User input not recognised! Running heatsoak. Please use yes/no or true/false"    
      _WAIT_HANDLING_LOW_TEMP
    {% endif %}

      _PRE_MESH_LEVEL
    {% if start_vars.neopixel_led == True %}
      STATUS_MESHING
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="TPU MESH BUILDING PLEASE WAIT"
    RESPOND TYPE=echo MSG="TPU MESH BUILDING PLEASE WAIT"
    G4 P5000
      
    {% if ('mcu eddy' in printer.configfile.config) or ('probe_eddy_current btt_eddy' in printer) or ('probe_eddy_current eddy' in printer) %}
      BED_MESH_CALIBRATE PROFILE=TPU METHOD=rapid_scan
    {% else %}
      BED_MESH_CALIBRATE PROFILE=TPU 
    {% endif %}

    SET_DISPLAY_TEXT MSG="DO NOT SAVE CONFIG - MACRO IS STILL RUNNING!"
    RESPOND TYPE=echo MSG="DO NOT SAVE CONFIG - MACRO IS STILL RUNNING!"
    G4 P10000
      
  {% elif build_tpu|lower in ['no', 'false'] %}
    RESPOND TYPE=COMMAND MSG="TPU mesh building skipped"

  {% else %}
    RESPOND TYPE=error MSG="TPU Mesh. User input not recognised! Please use yes/no or true/false"
  {% endif %}
  
#############################################################################################################

  {% if build_pla|lower in ['yes', 'true'] %}
    RESPOND TYPE=COMMAND MSG="Building PLA mesh"
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=filament VALUE='"PLA"'
    _Z_PARK
    {% if start_vars.neopixel_led == True %}
      STATUS_HEATING
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="Waiting For PLA Mesh Bed Temp: {mesh_vars.mesh_pla_bed_temp}c"                
    RESPOND TYPE=echo MSG="Waiting For PLA Mesh Bed Temp: {mesh_vars.mesh_pla_bed_temp}c"             
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={mesh_vars.mesh_pla_bed_temp} 
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={mesh_vars.mesh_pla_bed_temp|float -2} MAXIMUM={mesh_vars.mesh_pla_bed_temp|float + 5}    

    {% if nosoak|lower in ['yes', 'true'] %}
      RESPOND TYPE=error MSG="HEATSAOK SKIPPED this may lead to a less accurate mesh!"
      
    {% elif nosoak|lower in ['no', 'false'] %} 
      _WAIT_HANDLING_LOW_TEMP
     
    {% else %}
      RESPOND TYPE=error MSG="Mesh heatsoak. User input not recognised! Running heatsoak. Please use yes/no or true/false"    
      _WAIT_HANDLING_LOW_TEMP
    {% endif %}
      
      _PRE_MESH_LEVEL
    {% if start_vars.neopixel_led == True %}
     STATUS_MESHING
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="PLA MESH BUILDING PLEASE WAIT"
    RESPOND TYPE=echo MSG="PLA MESH BUILDING PLEASE WAIT"
    G4 P5000
      
    {% if ('mcu eddy' in printer.configfile.config) or ('probe_eddy_current btt_eddy' in printer) or ('probe_eddy_current eddy' in printer) %}
      BED_MESH_CALIBRATE PROFILE=default METHOD=rapid_scan
    {% else %}
      BED_MESH_CALIBRATE PROFILE=default
    {% endif %}
      
    SET_DISPLAY_TEXT MSG="DO NOT SAVE CONFIG - MACRO IS STILL RUNNING!"
    RESPOND TYPE=echo MSG="DO NOT SAVE CONFIG - MACRO IS STILL RUNNING!"
    G4 P10000

  {% elif build_pla|lower in ['no', 'false'] %}
    RESPOND TYPE=COMMAND MSG="PLA mesh building skipped"

  {% else %}
    RESPOND TYPE=error MSG="PLA Mesh. User input not recognised! Please use yes/no or true/false"
  {% endif %}
  
#############################################################################################################

  {% if build_petg|lower in ['yes', 'true'] %}
    RESPOND TYPE=COMMAND MSG="Building PETG mesh"
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=filament VALUE='"PETG"'
    _Z_PARK
    {% if start_vars.neopixel_led == True %}
      STATUS_HEATING
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="Waiting For PETG Mesh Bed Temp: {mesh_vars.mesh_petg_bed_temp}c"                
    RESPOND TYPE=echo MSG="Waiting For PETG Mesh Bed Temp: {mesh_vars.mesh_petg_bed_temp}c"             
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={mesh_vars.mesh_petg_bed_temp} 
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={mesh_vars.mesh_petg_bed_temp|float -2} MAXIMUM={mesh_vars.mesh_petg_bed_temp|float + 5}   

    {% if nosoak|lower in ['yes', 'true'] %}
      RESPOND TYPE=error MSG="HEATSAOK SKIPPED this may lead to a less accurate mesh!"
    
    {% elif nosoak|lower in ['no', 'false'] %}
      _WAIT_HANDLING_LOW_TEMP
      
    {% else %}
      RESPOND TYPE=error MSG="Mesh heatsoak. User input not recognised! Running heatsoak. Please use yes/no or true/false"      
      _WAIT_HANDLING_LOW_TEMP
    {% endif %}

      _PRE_MESH_LEVEL
    {% if start_vars.neopixel_led == True %}
      STATUS_MESHING
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="PETG MESH BUILDING PLEASE WAIT"
    RESPOND TYPE=echo MSG="PETG MESH BUILDING PLEASE WAIT"
    G4 P5000

    {% if ('mcu eddy' in printer.configfile.config) or ('probe_eddy_current btt_eddy' in printer) or ('probe_eddy_current eddy' in printer) %}
      BED_MESH_CALIBRATE PROFILE=PETG METHOD=rapid_scan
    {% else %}
      BED_MESH_CALIBRATE PROFILE=PETG
    {% endif %}

    SET_DISPLAY_TEXT MSG="DO NOT SAVE CONFIG - MACRO IS STILL RUNNING!"
    RESPOND TYPE=echo MSG="DO NOT SAVE CONFIG - MACRO IS STILL RUNNING!"    
    G4 P10000

  {% elif build_petg|lower in ['no', 'false'] %}
    RESPOND TYPE=COMMAND MSG="PETG mesh building skipped"

  {% else %}
    RESPOND TYPE=error MSG="PETG Mesh. User input not recognised! Please use yes/no or true/false"
  {% endif %}
  
#############################################################################################################

  {% if build_asa|lower in ['yes', 'true'] %}
    RESPOND TYPE=COMMAND MSG="Building ASA mesh"
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=filament VALUE='"ASA"'
    _Z_PARK
    {% if start_vars.neopixel_led == True %}
      STATUS_HEATING
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="Waiting For ASA Mesh Bed Temp: {mesh_vars.mesh_asa_bed_temp}c"                
    RESPOND TYPE=echo MSG="Waiting For ASA Mesh Bed Temp: {mesh_vars.mesh_asa_bed_temp}c"             
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={mesh_vars.mesh_asa_bed_temp} 
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={mesh_vars.mesh_asa_bed_temp|float -2} MAXIMUM={mesh_vars.mesh_asa_bed_temp|float + 5} 

    {% if nosoak|lower in ['yes', 'true'] %}
      RESPOND TYPE=error MSG="HEATSAOK SKIPPED this may lead to a less accurate mesh!"

    {% elif nosoak|lower in ['no', 'false'] %}
      _WAIT_HANDLING_HIGH_TEMP
      
    {% else %}
      RESPOND TYPE=error MSG="Mesh heatsoak. User input not recognised! Running heatsoak. Please use yes/no or true/false"     
      _WAIT_HANDLING_HIGH_TEMP
    {% endif %}

      _PRE_MESH_LEVEL
    {% if start_vars.neopixel_led == True %}
      STATUS_MESHING
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="ASA MESH BUILDING PLEASE WAIT"
    RESPOND TYPE=echo MSG="ASA MESH BUILDING PLEASE WAIT"
    G4 P5000

    {% if ('mcu eddy' in printer.configfile.config) or ('probe_eddy_current btt_eddy' in printer) or ('probe_eddy_current eddy' in printer) %}
      BED_MESH_CALIBRATE PROFILE=ASA METHOD=rapid_scan
    {% else %}
      BED_MESH_CALIBRATE PROFILE=ASA
    {% endif %}

    SET_DISPLAY_TEXT MSG="DO NOT SAVE CONFIG - MACRO IS STILL RUNNING!"
    RESPOND TYPE=echo MSG="DO NOT SAVE CONFIG - MACRO IS STILL RUNNING!"    
    G4 P10000  

  {% elif build_asa|lower in ['no', 'false'] %}
    RESPOND TYPE=COMMAND MSG="ASA mesh building skipped"

  {% else %}
    RESPOND TYPE=error MSG="ASA Mesh. User input not recognised! Please use yes/no or true/false"
  {% endif %}

#############################################################################################################

  {% if build_abs|lower in ['yes', 'true'] %}
    RESPOND TYPE=COMMAND MSG="Building ABS mesh"
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=filament VALUE='"ABS"'
    _Z_PARK
    {% if start_vars.neopixel_led == True %}
      STATUS_HEATING
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="Waiting For ABS Mesh Bed Temp: {mesh_vars.mesh_abs_bed_temp}c"                
    RESPOND TYPE=echo MSG="Waiting For ABS Mesh Bed Temp: {mesh_vars.mesh_abs_bed_temp}c"             
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={mesh_vars.mesh_abs_bed_temp} 
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={mesh_vars.mesh_abs_bed_temp|float -2} MAXIMUM={mesh_vars.mesh_abs_bed_temp|float + 5}   

    {% if nosoak|lower in ['yes', 'true'] %}
      RESPOND TYPE=error MSG="HEATSAOK SKIPPED this may lead to a less accurate mesh!"

    {% elif nosoak|lower in ['no', 'false'] %}
      _WAIT_HANDLING_HIGH_TEMP
      
    {% else %}
      RESPOND TYPE=error MSG="Mesh heatsoak. User input not recognised! Running heatsoak. Please use yes/no or true/false"     
       _WAIT_HANDLING_HIGH_TEMP
    {% endif %}

      _PRE_MESH_LEVEL
    {% if start_vars.neopixel_led == True %}
      STATUS_MESHING
    {% endif %}  
    
    SET_DISPLAY_TEXT MSG="ABS MESH BUILDING PLEASE WAIT"
    RESPOND TYPE=echo MSG="ABS MESH BUILDING PLEASE WAIT"
    G4 P5000
      
    {% if ('mcu eddy' in printer.configfile.config) or ('probe_eddy_current btt_eddy' in printer) or ('probe_eddy_current eddy' in printer) %}
      BED_MESH_CALIBRATE PROFILE=ABS METHOD=rapid_scan
    {% else %}
      BED_MESH_CALIBRATE PROFILE=ABS
    {% endif %}

  {% elif build_abs|lower in ['no', 'false'] %}
    RESPOND TYPE=COMMAND MSG="ABS mesh building skipped"

  {% else %}
    RESPOND TYPE=error MSG="ABS Mesh. User input not recognised! Please use yes/no or true/false"
  {% endif %}
    
#############################################################################################################   

    SET_DISPLAY_TEXT MSG="PARKING TOOLHEAD PLEASE WAIT..."
    RESPOND TYPE=echo MSG="PARKING TOOLHEAD PLEASE WAIT..."
    G4 P10000
    _Z_PARK
    M104 S0 # kill extruder temperature
    M140 S0 # kill bed temperature
    M84 X Y E # DISABLE ALL STEPPERS BUT Z
    M400
    SET_DISPLAY_TEXT MSG="ALL BED MESHES BUILT. MACRO COMPLETE!"
    RESPOND TYPE=echo MSG="ALL BED MESHES BUILT. MACRO COMPLETE!" 

  {% if mesh_vars.use_bed_fans == True %}
    SET_FAN_SPEED FAN=Bed_Fans SPEED=0
  {% endif %}
    
    
  {% if start_vars.chamber_fan == True %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.post_print_cool}    
  {% endif %}

  {% if start_vars.printer_lights == True %}  
    {% if printer["Printer_Lights"] != start_vars.printer_lights_finish %}
      SET_PIN PIN=Printer_Lights VALUE={start_vars.printer_lights_finish}
      {% if start_vars.neopixel_led == True and start_vars.neopixel_off == True %}
        STATUS_OFF
      {% endif %}
      
    {% endif %}
  {% endif %}

    M400
    G4 P5000
    SET_DISPLAY_TEXT MSG="SAVING CONFIG PLEASE WAIT..."
    RESPOND TYPE=echo MSG="SAVING CONFIG PLEASE WAIT..."
    G4 P5000
    SAVE_CONFIG


[gcode_macro _WAIT_HANDLING_LOW_TEMP]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %} 
  {% set mesh_vars = printer["gcode_macro _MESH_BUILDER_VARIABLES"] %}
  {% if start_vars.chamber_fan == True %}
    {% if printer["temperature_fan chamber"].temperature <mesh_vars.lo_heat_soak_threshold %}
      {% if start_vars.chamber_temp_wait == True %}
        {% if mesh_vars.use_bed_fans == True %}
          _BED_FANS_SETUP
          M400
          _BED_FAN_SET
        {% endif %}
        SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {mesh_vars.lo_heat_soak_threshold}c"
        RESPOND TYPE=echo MSG="Waiting For Chamber Temp: {mesh_vars.lo_heat_soak_threshold}c"
        TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={mesh_vars.lo_heat_soak_threshold|float}
      {% else %}
        _HEAT_WAIT MINUTES={mesh_vars.mesh_lo_temp_timer}
      {% endif %}  

    {% else %}
      M117 Already up to temp, heat soak skipped
      G4 P5000
    {% endif %}  

  {% elif start_vars.chamber_sensor == True %}  
    {% if printer["temperature_sensor Chamber_Temp"].temperature <mesh_vars.lo_heat_soak_threshold %}
      {% if start_vars.chamber_temp_wait == True %}
        {% if mesh_vars.use_bed_fans == True %}
          _BED_FANS_SETUP
          M400
          _BED_FAN_SET
        {% endif %}
        SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {mesh_vars.lo_heat_soak_threshold}c"
        RESPOND TYPE=echo MSG="Waiting For Chamber Temp: {mesh_vars.lo_heat_soak_threshold}c"
        TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Temp" MINIMUM={mesh_vars.lo_heat_soak_threshold|float}
      {% else %}
        _HEAT_WAIT MINUTES={mesh_vars.mesh_lo_temp_timer}
      {% endif %}  

    {% else %}
      M117 Already up to temp, heat soak skipped
      G4 P5000
    {% endif %}

  {% else %}
    _HEAT_WAIT MINUTES={mesh_vars.mesh_lo_temp_timer}
    
  {% endif %}

  {% if mesh_vars.use_bed_fans == True %}
    SET_FAN_SPEED FAN=Bed_Fans SPEED=0
  {% endif %}

  

[gcode_macro _WAIT_HANDLING_HIGH_TEMP]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set mesh_vars = printer["gcode_macro _MESH_BUILDER_VARIABLES"] %}
  {% if start_vars.chamber_fan == True %}
    {% if printer["temperature_fan chamber"].temperature <mesh_vars.hi_heat_soak_threshold %}
      {% if start_vars.chamber_temp_wait == True %}
        {% if mesh_vars.use_bed_fans == True %}
          M118 bed fans anyone?
          _BED_FANS_SETUP
          M400
          _BED_FAN_SET
        {% endif %}
        SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {mesh_vars.hi_heat_soak_threshold}c"
        RESPOND TYPE=echo MSG="Waiting For Chamber Temp: {mesh_vars.hi_heat_soak_threshold}c"
        TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={mesh_vars.hi_heat_soak_threshold|float -2}
      {% else %}
        _HEAT_WAIT MINUTES={mesh_vars.mesh_hi_temp_timer}
      {% endif %}  

    {% else %}
      SET_DISPLAY_TEXT MSG="Already up to temp, heat soak skipped"
      RESPOND TYPE=COMMAND MSG="Already up to temp, heat soak skipped"
      G4 P5000
    {% endif %}    

  {% elif start_vars.chamber_sensor == True %} 
    {% if printer["temperature_sensor Chamber_Temp"].temperature <mesh_vars.hi_heat_soak_threshold %}
      {% if start_vars.chamber_temp_wait == True %}
        {% if mesh_vars.use_bed_fans == True %}
          _BED_FANS_SETUP
          M400
          _BED_FAN_SET
          
        {% endif %}
        SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {mesh_vars.hi_heat_soak_threshold}c"
        RESPOND TYPE=echo MSG="Waiting For Chamber Temp: {mesh_vars.hi_heat_soak_threshold}c"
        TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Temp" MINIMUM={mesh_vars.hi_heat_soak_threshold|float -2}
      {% else %}
        _HEAT_WAIT MINUTES={mesh_vars.mesh_hi_temp_timer}
      {% endif %}  

    {% else %}
      SET_DISPLAY_TEXT MSG="Already up to temp, heat soak skipped"
      RESPOND TYPE=COMMAND MSG="Already up to temp, heat soak skipped"
      G4 P5000
    {% endif %} 

  {% else %}
    _HEAT_WAIT MINUTES={mesh_vars.mesh_hi_temp_timer}

  {% endif %}

  {% if mesh_vars.use_bed_fans == True %}
    SET_FAN_SPEED FAN=Bed_Fans SPEED=0
  {% endif %}

  

[gcode_macro _PRE_MESH_LEVEL]
gcode:
   {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
    _CONDITIONAL_CLEAN
  {% if start_vars.neopixel_led == True %}
    STATUS_LEVELING
  {% endif %}
    
    G28 Z

    _ADAPTIVE_LEVELLING
    _CONDITIONAL_CLEAN
    G28 Z


[gcode_macro _MESH_BUILDER_VERSION]
variable_demon_mesh_builder: "1.5.2"
gcode:


# Original contribution by Karl L, his macro he kindly shared follows

# [gcode_macro CREATE_BED_MESHES]
# description: Create bed meshes for DEMON Essentials with different temperatures for PLA, ASA, ABS, PETG, TPU
# gcode:
#     {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

#     M117 Calibrate Bed Meshes for DEMON Essentials
#     M104 S180       # set extruder temp tp 180
#     G28         	# Auto home
#     BED_MESH_CLEAR
#     M109 S180       # set extruder temp to 180 and wait for it
# #   Following sections should be sorted according temperature
# #   Material: TPU   mesh profile: "TPU"
#     M117 Creating Bed Mesh for "TPU"
#     M190 S40        # set bed temp and wait for it
#     _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}
#     BED_MESH_CALIBRATE PROFILE=TPU
#     M117 Do NOT save the config yet!
# #   Material: PLA   mesh profile: "default"
#     M117 Creating Bed Mesh for "PLA"
#     M190 S60        # set bed temp and wait for it
#     _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}
#     BED_MESH_CALIBRATE PROFILE=default
#     M117 Do NOT save the config yet!
# #   Material: PETG   mesh profile: "PETG"
#     M117 Creating Bed Mesh for "PETG"
#     M190 S75        # set bed temp and wait for it
#     _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}
#     BED_MESH_CALIBRATE PROFILE=PETG
#     M117 Do NOT save the config yet!
# #   Material: ASA   mesh profile: "ASA"
#     M117 Creating Bed Mesh for "ASA"
#     M190 S85        # set bed temp and wait for it
#     _HEAT_WAIT MINUTES={start_vars.hi_temp_timer}
#     BED_MESH_CALIBRATE PROFILE=ASA
#     M117 Do NOT save the config yet!
# #   Material: ABS   mesh profile: "ABS"
#     M117 Creating Bed Mesh for "ABS"
#     M190 S95        # set bed temp and wait for it
#     _HEAT_WAIT MINUTES={start_vars.hi_temp_timer}
#     BED_MESH_CALIBRATE PROFILE=ABS
    
# #   Finish and clean up
#     M117 Bed Meshes created
#     _TOOLHEAD_PARK_PAUSE_CANCEL
#     M104 S0         # kill extruder temp
#     M140 S0         # kill bed temp
#     M84 X Y E       # disable all steppers but Z
#     BED_MESH_CLEAR
#     M117 Now do SAVE_CONFIG!

      
