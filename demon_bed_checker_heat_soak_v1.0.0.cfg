
###################################################
#######>>>>>>>>>>  3DPrintDemon  <<<<<<<<<<<#######
#######   https://github.com/3DPrintDemon   #######


[gcode_macro _BED_CHECKER_STARTER]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if start_vars.chamber_fan == True and start_vars.chamber_sensor == True %} 
    {action_raise_error("This error is caused by you setting both the chamber_fan & chamber_sensor to true. Check demon_user_settings file & set these correctly for your printer!")}
  {% endif %}

  {% if start_vars.extra_initial_wait_time|float > 10 or start_vars.extra_initial_wait_time|float <= 0 %}
    {action_raise_error("Your BED_CHECKER interval is out of range. 0-10 is accepted. Please adjust value in demon_user_settings file!")}
  {% endif %}

  {% if start_vars.bed_check_interval|float > 30 or start_vars.bed_check_interval|float <= 0 %}
    {action_raise_error("Your BED_CHECKER interval is out of range. 1-30 is accepted. Please adjust value in demon_user_settings file!")}
  {% endif %}

  {% if start_vars.counter_limit|int not in range((0|int), (65|int)) %}
    {action_raise_error("Your BED_CHECKER counter limit is out of range. 1-20 is accepted. Please adjust value in demon_user_settings file!")}
  {% endif %}

  {% if start_vars.bed_check_tolerance|float > 0.20 or start_vars.bed_check_tolerance|float <= 0.0001 %}
    {action_raise_error("Your BED_CHECKER tolerance is out of range. 0.0001-0.20 is accepted. Please adjust value in demon_user_settings file!")}
  {% endif %}

  {% if start_vars.bed_check_tolerance_chain|int not in range((0|int), (6|int)) %}
    {action_raise_error("Your BED_CHECKER tolerance chain is out of range. 0-6 is accepted. Please adjust value in demon_user_settings file!")}
  {% endif %}

  {% if start_vars.probe_safety_margin|float > 30 or start_vars.probe_safety_margin|float < 10 %}
    {action_raise_error("Your BED_CHECKER safety_margin is out of range. 10-30 is accepted. Please adjust value in demon_user_settings file!")}
  {% endif %}

    _BC_POS_SET
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=limit_counter VALUE=0
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=tolerance_chain VALUE=1
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=initial_ref VALUE=True
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=early_finish VALUE=False
    M400
    SET_DISPLAY_TEXT MSG="HEAT SOAK - BED CHECKER - ACTIVE!"
    RESPOND TYPE=COMMAND MSG="HEAT SOAK - BED CHECKER - ACTIVE!"

    _BC_MOVE

    UPDATE_DELAYED_GCODE ID=_BED_CHECKER DURATION=0.001

    
  
[delayed_gcode _BED_CHECKER]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  {% set bc_vars = printer["gcode_macro _BED_CHECKER_VARS"] %}

  {% if printer.print_stats.state != 'printing' %}
    UPDATE_DELAYED_GCODE ID=_BED_CHECKER DURATION=0
    {action_raise_error("BED_CHECKER: PRINTER HALTED!")}

  {% else %}
    {% if core_vars.limit_counter|int > start_vars.counter_limit|int %}
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_soaked VALUE=True
      SAVE_VARIABLE VARIABLE=heat_soaked VALUE=True
      SET_DISPLAY_TEXT MSG="BED_CHECKER: Interval counter_limit reached, continuing with the print job..."
      RESPOND TYPE=COMMAND MSG="BED_CHECKER: Interval counter_limit reached, continuing with the print job..."
      {% if 'probe_eddy_ng btt_eddy' in printer or 'probe_eddy_ng eddy' in printer %}
        G0 Z{core_vars.z_park|float} F9000
      {% endif %}
 
      _BC_RESET
      _DEMON_START_STAGE_TWO
   
    {% else %}
      {% if bc_vars.initial_ref == True %}
        {% if start_vars.extra_initial_wait|float == True %}
          {% if core_vars.heat_soaked == False or (core_vars.bed_state|float <= core_vars.bed|int * 0.40) %}
            SET_DISPLAY_TEXT MSG="BED_CHECKER: Extra initial wait of {start_vars.extra_initial_wait_time|float} minutes"
            RESPOND TYPE=error MSG="BED_CHECKER: Extra initial wait of {start_vars.extra_initial_wait_time|float} minutes to allow the bed to start to heat up"
            G4 P{start_vars.extra_initial_wait_time|float * 60000}
          {% endif %}
        {% endif %}

        SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=initial_ref VALUE=False
        SET_DISPLAY_TEXT MSG="BED_CHECKER: Probing ref_point first attempt!"
        RESPOND TYPE=error MSG="BED_CHECKER: Probing ref_point first attempt! This must be the point where the bed moves the most when fully heated & safely reachable by your probe or damage may result!"

        {% if 'probe_eddy_ng btt_eddy' in printer or 'probe_eddy_ng eddy' in printer %}
          _BC_EDDY_NG_PROBE

        {% else %}
          _BC_PROBE

        {% endif %}

        SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=prev_probe_query VALUE={printer.probe.last_z_result|float}
        UPDATE_DELAYED_GCODE ID=_BED_CHECKER DURATION=0.1

      {% else %}
        {% if core_vars.limit_counter == 0 %}
          SET_DISPLAY_TEXT MSG="Total allowable HEAT SOAK time will be {(start_vars.bed_check_interval|float * start_vars.counter_limit|int)} minutes"
          RESPOND TYPE=COMMAND MSG="BED_CHECKER: Waiting for {start_vars.bed_check_interval|float} minutes to probe the bed. Previous probe attempts {core_vars.limit_counter|int} out of {start_vars.counter_limit|int}. Total allowable HEAT SOAK time will be {(start_vars.bed_check_interval|float * start_vars.counter_limit|int)} minutes."

        {% else %}
          SET_DISPLAY_TEXT MSG="BED_CHECKER: Remaining {(start_vars.bed_check_interval|float * start_vars.counter_limit|int) - (start_vars.bed_check_interval|float * core_vars.limit_counter|int)} minutes"
          RESPOND TYPE=COMMAND MSG="BED_CHECKER: Waiting for {start_vars.bed_check_interval|float} minutes to probe the bed. Previous probe attempts {core_vars.limit_counter|int} out of {start_vars.counter_limit|int}. Total allowable HEAT SOAK time will be {(start_vars.bed_check_interval|float * start_vars.counter_limit|int)} minutes. Remaining {(start_vars.bed_check_interval|float * start_vars.counter_limit|int) - (start_vars.bed_check_interval|float * core_vars.limit_counter|int)} minutes."
        {% endif %}
      
        G4 P{start_vars.bed_check_interval|float * 60000}
        SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=limit_counter VALUE={core_vars.limit_counter|int + 1}
     
        {% if 'probe_eddy_ng btt_eddy' in printer or 'probe_eddy_ng eddy' in printer %}
          _BC_EDDY_NG_PROBE

        {% else %}
          _BC_PROBE
        {% endif %}
      
        SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=prev_probe_query VALUE={printer.probe.last_z_result|float}
        M400
        _DIFF_CALC
        M400
        _BED_CHECKER_HELPER
      {% endif %}
    {% endif %}
  {% endif %}



[gcode_macro _BED_CHECKER_HELPER]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  {% set bc_vars = printer["gcode_macro _BED_CHECKER_VARS"] %}

  {% if printer.print_stats.state != 'printing' %}
    UPDATE_DELAYED_GCODE ID=_BED_CHECKER DURATION=0
    {action_raise_error("BED_CHECKER: PRINTER HALTED!")}

  {% else %}
    {% if bc_vars.early_finish == True %}
    
      SET_DISPLAY_TEXT MSG="BED CHECKER HEAT SOAK SKIP ended early by user!"
      RESPOND TYPE=error MSG="BED CHECKER HEAT SOAK SKIP ended early by user!"
      _BC_RESET
      SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=early_finish VALUE=False
      
      {% if 'probe_eddy_ng btt_eddy' in printer or 'probe_eddy_ng eddy' in printer %}
        G0 Z{core_vars.z_park|float} F9000
      {% endif %}
      
      _Z_PARK
      _DEMON_START_STAGE_TWO

    {% else %}

      SET_DISPLAY_TEXT MSG="Probed difference is {("%.4fmm" % (bc_vars.probe_diff|float))}, acceptable set tolerance is {("%.4fmm" % (start_vars.bed_check_tolerance|float))}"
      RESPOND TYPE=COMMAND MSG="BED_CHECKER: Previous probe attempt was {("%.4fmm" % (core_vars.prev_probe_query|float))}, the current probing attempt is {("%.4fmm" % (printer.probe.last_z_result|float))}. Difference is {("%.4fmm" % (bc_vars.probe_diff|float))}, acceptable set tolerance is {("%.4fmm" % (start_vars.bed_check_tolerance|float))}."

      {% if printer.probe.last_z_result|float > (core_vars.prev_probe_query|float + start_vars.bed_check_tolerance|float) or printer.probe.last_z_result|float < (core_vars.prev_probe_query|float - start_vars.bed_check_tolerance|float) %}
        {% if core_vars.tolerance_chain != 1 %}
          SET_DISPLAY_TEXT MSG="BED CHECKER: Tolerance chain broken, retrying..."
          RESPOND TYPE=error MSG="BED CHECKER: Tolerance chain broken as last probe attempt was out of set range, resetting & trying again if interval counter allows."
        {% endif %}
      
        SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=tolerance_chain VALUE=1
        UPDATE_DELAYED_GCODE ID=_BED_CHECKER DURATION=0.1

      {% else %}
        {% if core_vars.tolerance_chain|int >= start_vars.bed_check_tolerance_chain|int %}
          SET_DISPLAY_TEXT MSG="BED_CHECKER: Tolerance chain completed, HEAT SOAK finished!"
          RESPOND TYPE=COMMAND MSG="BED_CHECKER: Tolerance chain completed. Readings seem to have settled at temperature!"
          RESPOND TYPE=COMMAND MSG="BED_CHECKER HEAT SOAK finished!"
          _BC_RESET
          _Z_PARK
        
          {% if start_vars.chamber_temp_wait == True %}
            _POST_BED_CHECKER_WAIT
        
          {% else %}
            SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_soaked VALUE=True
            SAVE_VARIABLE VARIABLE=heat_soaked VALUE=True
            
            {% if 'probe_eddy_ng btt_eddy' in printer or 'probe_eddy_ng eddy' in printer %}
              G0 Z{core_vars.z_park|float} F9000
            {% endif %}
            
            _DEMON_START_STAGE_TWO
          {% endif %}
      
        {% else %}
          {% if core_vars.tolerance_chain == 1 %}
            SET_DISPLAY_TEXT MSG="BED_CHECKER: Probe attempt in range at temperature! Starting tolerance chain to confirm! {core_vars.tolerance_chain|int} out of {start_vars.bed_check_tolerance_chain|int}."
            RESPOND TYPE=COMMAND MSG="BED_CHECKER: Probe attempt in range at temperature! Starting tolerance chain to confirm! {core_vars.tolerance_chain|int} out of {start_vars.bed_check_tolerance_chain|int}."

          {% else %}
            SET_DISPLAY_TEXT MSG="BED_CHECKER: Probe attempt in range at temperature! Tolerance chain count {core_vars.tolerance_chain|int} out of {start_vars.bed_check_tolerance_chain|int}."
            RESPOND TYPE=COMMAND MSG="BED_CHECKER: Probe attempt in range at temperature! Tolerance chain count {core_vars.tolerance_chain|int} out of {start_vars.bed_check_tolerance_chain|int}."
          {% endif %}
        
          SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=tolerance_chain VALUE={core_vars.tolerance_chain|int + 1}
          UPDATE_DELAYED_GCODE ID=_BED_CHECKER DURATION=0.1

        {% endif %}
      {% endif %}
    {% endif %}
  {% endif %}



[gcode_macro _POST_BED_CHECKER_WAIT]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if core_vars.chamber_thermal_sensor|int == 0 %}
    {action_raise_error("This error is caused by no correctly named chamber_sensor or temperature controlled chamber_fan being available to the system! Check the system is setup correctly!")}  

  {% elif core_vars.chamber_thermal_sensor|int == 1 %}
    {% set thermal_sensor = printer["temperature_fan chamber"].temperature|float %}
    {% set wait_thermal_sensor = "temperature_fan chamber"|string %}

  {% elif core_vars.chamber_thermal_sensor|int == 2 %}
    {% set thermal_sensor = printer["temperature_sensor Chamber_Temp"].temperature|float %}
    {% set wait_thermal_sensor = "temperature_sensor Chamber_Temp"|string %}

  {% endif %}
  
  {% if start_vars.chamber_fan == True or start_vars.chamber_sensor == True %}
    {% if thermal_sensor|float < core_vars.heat_wait_temp|int %}
      SET_DISPLAY_TEXT MSG="Now waiting For Chamber Temp: {core_vars.heat_wait_temp|int}c"
      RESPOND TYPE=COMMAND MSG="Now waiting For Chamber Temp: {core_vars.heat_wait_temp|int}c"
      TEMPERATURE_WAIT SENSOR="{wait_thermal_sensor|float}" MINIMUM={core_vars.heat_wait_temp|float -1}
      RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
      M400
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_soaked VALUE=True
      SAVE_VARIABLE VARIABLE=heat_soaked VALUE=True
      
    {% else %}
      SET_DISPLAY_TEXT MSG="Chamber already up to {core_vars.filament|string} temp, wait bypassed"
      RESPOND TYPE=COMMAND MSG="Chamber already up to {core_vars.filament|string} temp, wait bypassed"
      G4 P5000
      SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=heat_soaked VALUE=True
      SAVE_VARIABLE VARIABLE=heat_soaked VALUE=True
      
      {% if 'probe_eddy_ng btt_eddy' in printer or 'probe_eddy_ng eddy' in printer %}
        G0 Z{core_vars.z_park|float} F9000
      {% endif %}
      
      _DEMON_START_STAGE_TWO
    {% endif %}
  {% endif %}



[gcode_macro DEMON_BED_CHECKER_HEAT_SOAK_SKIP]
description: When using the BED CHECKER HEAT SOAK option you can skip the remaining intervals left while the heat soak is running!
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set bc_vars = printer["gcode_macro _BED_CHECKER_VARS"] %}

  {% if printer.print_stats.state not in ['printing', 'paused'] %}
     RESPOND TYPE=error MSG="No print running right now"
  {% else %}
    {% if start_vars.bed_checker_enable != True %}
      RESPOND TYPE=error MSG="DEMON BED CHECKER HEAT SOAK is not enabled, regular heat soaks cannot be skipped while in progress."

    {% else %}
      SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=early_finish VALUE=True
      RESPOND TYPE=error MSG="BED_CHECKER: Heat soak will try to end early after the next interval!"
    {% endif %}
  {% endif %}

  

[gcode_macro _DIFF_CALC]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}

  {% if printer.probe.last_z_result|float > core_vars.prev_probe_query|float %}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=probe_diff VALUE={printer.probe.last_z_result|float - core_vars.prev_probe_query|float}

  {% elif printer.probe.last_z_result|float <= core_vars.prev_probe_query|float %}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=probe_diff VALUE={core_vars.prev_probe_query|float - printer.probe.last_z_result|float}
  {% endif %}



[gcode_macro _BC_POS_SET]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
 
  {% if 'probe_eddy_current btt_eddy' in printer %}
    {% set noz_pos_x = start_vars.check_ref_point_x|float - printer.configfile.config['probe_eddy_current btt_eddy'].x_offset|float %}
    {% set noz_pos_y = start_vars.check_ref_point_y|float - printer.configfile.config['probe_eddy_current btt_eddy'].y_offset|float %}
    {% set probe_pos_x = start_vars.check_ref_point_x|float + printer.configfile.config['probe_eddy_current btt_eddy'].x_offset|float %}
    {% set probe_pos_y = start_vars.check_ref_point_y|float + printer.configfile.config['probe_eddy_current btt_eddy'].y_offset|float %}

    M400
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=nozzle_position_x VALUE={noz_pos_x}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=nozzle_position_y VALUE={noz_pos_y}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=probe_position_x VALUE={probe_pos_x}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=probe_position_y VALUE={probe_pos_y}
    M400
    _BC_SAFETY_CHECK
    M400

  {% elif 'probe_eddy_ng btt_eddy' in printer %}
    {% set noz_pos_x = start_vars.check_ref_point_x|float - printer.configfile.config['probe_eddy_ng btt_eddy'].x_offset|float %}
    {% set noz_pos_y = start_vars.check_ref_point_y|float - printer.configfile.config['probe_eddy_ng btt_eddy'].y_offset|float %}
    {% set probe_pos_x = start_vars.check_ref_point_x|float + printer.configfile.config['probe_eddy_ng btt_eddy'].x_offset|float %}
    {% set probe_pos_y = start_vars.check_ref_point_y|float + printer.configfile.config['probe_eddy_ng btt_eddy'].y_offset|float %}

    M400
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=nozzle_position_x VALUE={noz_pos_x}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=nozzle_position_y VALUE={noz_pos_y}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=probe_position_x VALUE={probe_pos_x}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=probe_position_y VALUE={probe_pos_y}
    M400
    _BC_SAFETY_CHECK
    M400
    
  {% elif 'probe_eddy_current eddy' in printer %}
    {% set noz_pos_x = start_vars.check_ref_point_x|float - printer.configfile.config['probe_eddy_current eddy'].x_offset|float %}
    {% set noz_pos_y = start_vars.check_ref_point_y|float - printer.configfile.config['probe_eddy_current eddy'].y_offset|float %}
    {% set probe_pos_x = start_vars.check_ref_point_x|float + printer.configfile.config['probe_eddy_current eddy'].x_offset|float %}
    {% set probe_pos_y = start_vars.check_ref_point_y|float + printer.configfile.config['probe_eddy_current eddy'].y_offset|float %}

    M400
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=nozzle_position_x VALUE={noz_pos_x}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=nozzle_position_y VALUE={noz_pos_y}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=probe_position_x VALUE={probe_pos_x}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=probe_position_y VALUE={probe_pos_y}
    M400
    _BC_SAFETY_CHECK
    M400

  {% elif 'probe' in printer %}
    {% set noz_pos_x = start_vars.check_ref_point_x|float - printer.configfile.config['probe'].x_offset|float %}
    {% set noz_pos_y = start_vars.check_ref_point_y|float - printer.configfile.config['probe'].y_offset|float %}
    {% set probe_pos_x = start_vars.check_ref_point_x|float + printer.configfile.config['probe'].x_offset|float %}
    {% set probe_pos_y = start_vars.check_ref_point_y|float + printer.configfile.config['probe'].y_offset|float %}

    M400
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=nozzle_position_x VALUE={noz_pos_x}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=nozzle_position_y VALUE={noz_pos_y}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=probe_position_x VALUE={probe_pos_x}
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=probe_position_y VALUE={probe_pos_y}
    M400
    _BC_SAFETY_CHECK
    M400

  {% else %}
    {action_raise_error("It seems your probe is not currently supported by the BED_CHECKER macros! Sorry about that.")}
  {% endif %}

[gcode_macro _BC_SAFETY_CHECK]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set bc_vars = printer["gcode_macro _BED_CHECKER_VARS"] %}
  
  {% if bc_vars.probe_position_x < (printer.toolhead.axis_minimum.x|float + start_vars.probe_safety_margin|float) %}
    {action_raise_error("Your BED_CHECKER check_ref_point_x will put the probe too close to the axis minimum. Please adjust value in demon_user_settings file!")}
  {% elif bc_vars.probe_position_x > (printer.toolhead.axis_maximum.x|float - start_vars.probe_safety_margin|float) %}
    {action_raise_error("Your BED_CHECKER check_ref_point_x will put the probe too close to the axis maximum. Please adjust value in demon_user_settings file!")}
  {% elif bc_vars.probe_position_y < (printer.toolhead.axis_minimum.y|float + start_vars.probe_safety_margin|float) %}
    {action_raise_error("Your BED_CHECKER check_ref_point_y will put the probe too close to the axis minimum. Please adjust value in demon_user_settings file!")}
  {% elif bc_vars.probe_position_y > (printer.toolhead.axis_maximum.y|float - start_vars.probe_safety_margin|float) %}
    {action_raise_error("Your BED_CHECKER check_ref_point_y will put the probe too close to the axis maximum. Please adjust value in demon_user_settings file!")}
  {% else %}
    RESPOND TYPE=COMMAND MSG="BED_CHECKER: probe_safety_margin check PASSED"
  {% endif %}


[gcode_macro _BC_MOVE]
gcode:
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  {% set bc_vars = printer["gcode_macro _BED_CHECKER_VARS"] %}

    G90
    G0 X{bc_vars.nozzle_position_x|float} Y{bc_vars.nozzle_position_y|float} Z{core_vars.z_park|float} F9000
    M400


[gcode_macro _BC_EDDY_NG_PROBE]
gcode:
  {% set bc_vars = printer["gcode_macro _BED_CHECKER_VARS"] %}
  
    G0 X{bc_vars.nozzle_position_x|float} Y{bc_vars.nozzle_position_y|float} Z3 F5000
    M400
    G4 P2000
    PROBE_EDDY_NG_PROBE_STATIC
    M400



[gcode_macro _BC_PROBE]
gcode:
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  {% set bc_vars = printer["gcode_macro _BED_CHECKER_VARS"] %}
 
    G0 X{bc_vars.nozzle_position_x|float} Y{bc_vars.nozzle_position_y|float} Z{core_vars.z_park|float} F9000
    _BC_MOVE
    M400
    PROBE SAMPLES=3 SAMPLES_RESULT=median
    M400
    G0 Z{core_vars.z_park|float} F2000
    


[gcode_macro _BC_RESET]
gcode:
    UPDATE_DELAYED_GCODE ID=_BED_CHECKER DURATION=0
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=tolerance_chain VALUE=1
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=limit_counter VALUE=0
    SET_GCODE_VARIABLE MACRO=_BED_CHECKER_VARS VARIABLE=initial_ref VALUE=False



[gcode_macro _BED_CHECKER_VARS]
variable_probe_diff: 0.00
variable_early_finish: False
variable_initial_ref: True
variable_nozzle_position_x: 80
variable_nozzle_position_y: 80
variable_probe_position_x: 100
variable_probe_position_y: 100
gcode:



[gcode_macro REFERENCE_BED_MESH_BUILDER]
description: Fully automated reference mesh builder. If no values set defaults will used or settings in demon_user_settings! If chamber fan/sensor enabled macro uses TEMPERATURE_WAIT not timers. Compatible with Eddy Probe!
gcode:
    {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
    {% set mesh_vars = printer["gcode_macro _MESH_BUILDER_VARIABLES"] %}
    {% set lotimer = params.LOW_TEMP_TIMER|default(0)|int %}
    {% set hitimer = params.HI_TEMP_TIMER|default(0)|int %}
    {% set lothreshold = params.LO_TEMP_THRESHOLD|default(22)|int %}
    {% set hithreshold = params.HI_TEMP_THRESHOLD|default(42)|int %}
    {% set bedfans = params.USE_BED_FANS|default('No')|string %}

#############################################################################################################  

    _CHAMBER_SENSOR_DEFINE

  {% if bedfans|lower in ['yes', 'true'] and start_vars.bed_fans == True %}
    
    SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=use_bed_fans VALUE=True
    SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE=True
    RESPOND TYPE=COMMAND MSG="Use bed fans: True"

  {% elif bedfans|lower in ['yes', 'true'] and start_vars.bed_fans == False %}
    RESPOND TYPE=error MSG="Sorry no bed fans in the system to enable"

  {% elif bedfans|lower in ['no', 'false'] and start_vars.bed_fans == True %}
    SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=use_bed_fans VALUE=False
    RESPOND TYPE=COMMAND MSG="Use bed fans: False"

  {% elif bedfans|lower in ['no', 'false'] and start_vars.bed_fans == False %}
    SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=use_bed_fans VALUE=False
    RESPOND TYPE=COMMAND MSG="Use bed fans: False - no fans available!"

  {% else %}
    RESPOND TYPE=error MSG="Mesh Builder. Use bed fans, user input not recognised! Please use yes/no or true/false"
    
  {% endif %}

  {% if start_vars.chamber_fan == False and start_vars.chamber_sensor == False %}
    {% if 'LOW_TEMP_TIMER' not in params and 'HI_TEMP_TIMER' not in params %}
      RESPOND TYPE=error MSG="Mesh Builder. No macro button heatsoak timers set, using saved file values. See demon_user_settings"
    {% endif %}
  
    {% if 'LOW_TEMP_TIMER' in params %}
      {% if lotimer <= 0 %}
        RESPOND TYPE=COMMAND MSG="Mesh heatsoak timer cannot be 0, value of 1 or higher can be accepted. Timer set for 1 minute."
        SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=mesh_lo_temp_timer VALUE=1
    
      {% elif lotimer >= 1 %}
        RESPOND TYPE=COMMAND MSG="Mesh heatsoak. Low temp timer set to {lotimer|int} minutes"
        SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=mesh_lo_temp_timer VALUE={'LOW_TEMP_TIMER'|int}
      {% endif %}

    {% else %}  
    {% endif %}

    {% if 'HI_TEMP_TIMER' in params %}
      {% if hitimer <= 0 %}
        RESPOND TYPE=COMMAND MSG="Mesh heatsoak timer cannot be 0, value of 1 or higher can be accepted. Timer set for 1 minute."
        SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=mesh_hi_temp_timer VALUE=1
    
      {% elif hitimer >= 1 %}
        RESPOND TYPE=COMMAND MSG="Mesh heatsoak. High temp timer set to {hitimer|int} minutes"
        SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=mesh_hi_temp_timer VALUE={hitimer|int}
      {% endif %}

    {% else %}  
    {% endif %}

  {% elif start_vars.chamber_fan == True or start_vars.chamber_sensor == True %}
    RESPOND TYPE=error MSG="Mesh Builder. Chamber fan/sensor detected, using TEMPERATURE_WAIT instead of the timers!"
   
    {% if 'LO_TEMP_THRESHOLD' not in params and 'HI_TEMP_THRESHOLD' not in params %}
      RESPOND TYPE=error MSG="Mesh Builder. No macro button thresholds set, using saved file values. See demon_user_settings"
    {% endif %}

    {% if 'LO_TEMP_THRESHOLD' in params %}
      {% if lothreshold in range (15, 41) %}
        RESPOND TYPE=COMMAND MSG="Mesh Builder. Low temp chamber thershold set to {lothreshold|int}c"
        SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=lo_heat_soak_threshold VALUE={lothreshold|int}

      {% else %}
        RESPOND TYPE=error MSG="Mesh Builder. Low temp threshold outside of accepted range, values of 15-40c can be accepted. Low threshold set to saved value"
      {% endif %}
    {% endif %}

    {% if 'HI_TEMP_THRESHOLD' in params %}
      {% if hithreshold in range (40, 70) %}
        RESPOND TYPE=COMMAND MSG="Mesh Builder. HIGH temp chamber thershold set to {hithreshold|int}c"
        SET_GCODE_VARIABLE MACRO=_MESH_BUILDER_VARIABLES VARIABLE=hi_heat_soak_threshold VALUE={hithreshold|int}

      {% else %}
        RESPOND TYPE=error MSG="Mesh Builder. High temp threshold outside of accepted range, values of 40-70c can be accepted. High threshold set to saved value"
      {% endif %}
    {% endif %}

  {% endif %}

  {% if start_vars.printer_lights == True %}  
    {% if printer["Printer_Lights"] != start_vars.printer_lights_print %}
      SET_LED LED=Printer_Lights WHITE={start_vars.printer_lights_print} SYNC=0 TRANSMIT=1
      # SET_PIN PIN=Printer_Lights VALUE={start_vars.printer_lights_print}
    {% endif %}
  {% endif %}  

    SET_DISPLAY_TEXT MSG="Building Bed Meshes PLEASE WAIT...."
    RESPOND TYPE=echo MSG="NOTE: THIS IS A LONG MACRO! IT BUILDS 5 FULL MESHES! DO NOT PRESS SAVE CONFIG! THIS MACRO AUTO SAVES WHEN COMPLETE!! BUILDING WILL START SOON PLEASE WAIT..."
    G4 P20000
    G90 ; Use absoulte coordinates
    M83 ; Extruder relative mode
    SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset
    BED_MESH_CLEAR       # Clears currently loaded mesh    

  {% if start_vars.neopixel_led == True %}
    STATUS_HEATING
  {% endif %}
    
  {% if printer.configfile.settings.stepper_z.endstop_pin != 'probe:z_virtual_endstop' %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.pla_noz_pre}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.pla_noz_pre|float -5} MAXIMUM={start_vars.pla_noz_pre|float + 5}

  {% else %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=90
    
  {% endif %}

    _CONDITIONAL_HOME

#############################################################################################################

    RESPOND TYPE=COMMAND MSG="Building COLD_REF mesh"
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=filament VALUE='"TPU"'
    _Z_PARK
  {% if start_vars.neopixel_led == True %}
    STATUS_HEATING 
  {% endif %}

  {% if printer.heater_bed.temperature|int > 30 %}
    SET_DISPLAY_TEXT MSG="Bed needs to cool to below 30c, please wait...!"
    RESPOND TYPE=echo MSG="Bed needs to cool to below 30c, please wait...!"
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=18 MAXIMUM=30
  {% endif %}

    _PRE_MESH_LEVEL
  {% if start_vars.neopixel_led == True %}
    STATUS_MESHING
  {% endif %}

    _MESHING_EDDY_NG_TAP
    
    SET_DISPLAY_TEXT MSG="COLD REFERENCE MESH BUILDING PLEASE WAIT"
    RESPOND TYPE=echo MSG="COLD REFERENCE MESH BUILDING PLEASE WAIT"
    G4 P5000
      
  {% if ('mcu eddy' in printer.configfile.config) or ('probe_eddy_current btt_eddy' in printer) or ('probe_eddy_current eddy' in printer) %}
    BED_MESH_CALIBRATE PROFILE=COLD_REF METHOD=rapid_scan
  {% else %}
    BED_MESH_CALIBRATE PROFILE=COLD_REF 
  {% endif %}

    SET_DISPLAY_TEXT MSG="DO NOT SAVE CONFIG - MACRO IS STILL RUNNING!"
    RESPOND TYPE=echo MSG="DO NOT SAVE CONFIG - MACRO IS STILL RUNNING!"
    G4 P10000
        
#############################################################################################################


    RESPOND TYPE=COMMAND MSG="Building HIGH_TEMP_REF mesh"
    SET_GCODE_VARIABLE MACRO=_CORE_VARS VARIABLE=filament VALUE='"ASA"'
    _Z_PARK
  {% if start_vars.neopixel_led == True %}
    STATUS_HEATING
  {% endif %}
    
    SET_DISPLAY_TEXT MSG="Waiting For HIGH_TEMP_REF Mesh Bed Temp: {mesh_vars.mesh_asa_bed_temp}c"                
    RESPOND TYPE=echo MSG="Waiting For HIGH_TEMP_REF Mesh Bed Temp: {mesh_vars.mesh_asa_bed_temp}c"             
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={mesh_vars.mesh_asa_bed_temp} 
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={mesh_vars.mesh_asa_bed_temp|float -2} MAXIMUM={mesh_vars.mesh_asa_bed_temp|float + 5} 

    _HEAT_WAIT MINUTES={mesh_vars.mesh_hi_temp_timer}
    
    _PRE_MESH_LEVEL
  {% if start_vars.neopixel_led == True %}
    STATUS_MESHING
  {% endif %}

    _MESHING_EDDY_NG_TAP
    
    SET_DISPLAY_TEXT MSG="HIGH_TEMP_REF MESH BUILDING PLEASE WAIT"
    RESPOND TYPE=echo MSG="HIGH_TEMP_REF MESH BUILDING PLEASE WAIT"
    G4 P5000

  {% if ('mcu eddy' in printer.configfile.config) or ('probe_eddy_current btt_eddy' in printer) or ('probe_eddy_current eddy' in printer) %}
    BED_MESH_CALIBRATE PROFILE=HIGH_TEMP_REF METHOD=rapid_scan
  {% else %}
    BED_MESH_CALIBRATE PROFILE=HIGH_TEMP_REF
  {% endif %}

    M400
    G4 P5000
    SET_DISPLAY_TEXT MSG="SAVING CONFIG PLEASE WAIT..."
    RESPOND TYPE=echo MSG="SAVING CONFIG PLEASE WAIT..."
    G4 P5000
    SAVE_CONFIG



[gcode_macro _BED_CHECKER_VERSION]
variable_demon_bed_checker: "1.0.0"
gcode:
